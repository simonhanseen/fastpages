{
  
    
        "post0": {
            "title": "Title",
            "content": "Zindi Africa - Crop Disease (Without optimization) . !pip install torch !pip install pytorch !pip install torchvision !pip install fastai !pip3 install git+https://github.com/fastai/fastai.git !pip install -Uqq fastbook . Requirement already satisfied: torch in /usr/local/lib/python3.7/dist-packages (1.8.0+cu101) Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from torch) (1.19.5) Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from torch) (3.7.4.3) Collecting pytorch Downloading https://files.pythonhosted.org/packages/ee/67/f403d4ae6e9cd74b546ee88cccdb29b8415a9c1b3d80aebeb20c9ea91d96/pytorch-1.0.2.tar.gz Building wheels for collected packages: pytorch Building wheel for pytorch (setup.py) ... error ERROR: Failed building wheel for pytorch Running setup.py clean for pytorch Failed to build pytorch Installing collected packages: pytorch Running setup.py install for pytorch ... error ERROR: Command errored out with exit status 1: /usr/bin/python3 -u -c &#39;import sys, setuptools, tokenize; sys.argv[0] = &#39;&#34;&#39;&#34;&#39;/tmp/pip-install-5yfqmbl8/pytorch/setup.py&#39;&#34;&#39;&#34;&#39;; __file__=&#39;&#34;&#39;&#34;&#39;/tmp/pip-install-5yfqmbl8/pytorch/setup.py&#39;&#34;&#39;&#34;&#39;;f=getattr(tokenize, &#39;&#34;&#39;&#34;&#39;open&#39;&#34;&#39;&#34;&#39;, open)(__file__);code=f.read().replace(&#39;&#34;&#39;&#34;&#39; r n&#39;&#34;&#39;&#34;&#39;, &#39;&#34;&#39;&#34;&#39; n&#39;&#34;&#39;&#34;&#39;);f.close();exec(compile(code, __file__, &#39;&#34;&#39;&#34;&#39;exec&#39;&#34;&#39;&#34;&#39;))&#39; install --record /tmp/pip-record-9neknvec/install-record.txt --single-version-externally-managed --compile Check the logs for full command output. Requirement already satisfied: torchvision in /usr/local/lib/python3.7/dist-packages (0.9.0+cu101) Requirement already satisfied: torch==1.8.0 in /usr/local/lib/python3.7/dist-packages (from torchvision) (1.8.0+cu101) Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from torchvision) (1.19.5) Requirement already satisfied: pillow&gt;=4.1.1 in /usr/local/lib/python3.7/dist-packages (from torchvision) (7.0.0) Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from torch==1.8.0-&gt;torchvision) (3.7.4.3) Requirement already satisfied: fastai in /usr/local/lib/python3.7/dist-packages (1.0.61) Requirement already satisfied: nvidia-ml-py3 in /usr/local/lib/python3.7/dist-packages (from fastai) (7.352.0) Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from fastai) (2.23.0) Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from fastai) (1.4.1) Requirement already satisfied: spacy&gt;=2.0.18; python_version &lt; &#34;3.8&#34; in /usr/local/lib/python3.7/dist-packages (from fastai) (2.2.4) Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from fastai) (20.9) Requirement already satisfied: numpy&gt;=1.15 in /usr/local/lib/python3.7/dist-packages (from fastai) (1.19.5) Requirement already satisfied: torch&gt;=1.0.0 in /usr/local/lib/python3.7/dist-packages (from fastai) (1.8.0+cu101) Requirement already satisfied: torchvision in /usr/local/lib/python3.7/dist-packages (from fastai) (0.9.0+cu101) Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.7/dist-packages (from fastai) (4.6.3) Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from fastai) (1.1.5) Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from fastai) (3.2.2) Requirement already satisfied: fastprogress&gt;=0.2.1 in /usr/local/lib/python3.7/dist-packages (from fastai) (1.0.0) Requirement already satisfied: pyyaml in /usr/local/lib/python3.7/dist-packages (from fastai) (3.13) Requirement already satisfied: Pillow in /usr/local/lib/python3.7/dist-packages (from fastai) (7.0.0) Requirement already satisfied: numexpr in /usr/local/lib/python3.7/dist-packages (from fastai) (2.7.3) Requirement already satisfied: bottleneck in /usr/local/lib/python3.7/dist-packages (from fastai) (1.3.2) Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;fastai) (2020.12.5) Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;fastai) (1.24.3) Requirement already satisfied: chardet&lt;4,&gt;=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;fastai) (3.0.4) Requirement already satisfied: idna&lt;3,&gt;=2.5 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;fastai) (2.10) Requirement already satisfied: tqdm&lt;5.0.0,&gt;=4.38.0 in /usr/local/lib/python3.7/dist-packages (from spacy&gt;=2.0.18; python_version &lt; &#34;3.8&#34;-&gt;fastai) (4.41.1) Requirement already satisfied: blis&lt;0.5.0,&gt;=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy&gt;=2.0.18; python_version &lt; &#34;3.8&#34;-&gt;fastai) (0.4.1) Requirement already satisfied: catalogue&lt;1.1.0,&gt;=0.0.7 in /usr/local/lib/python3.7/dist-packages (from spacy&gt;=2.0.18; python_version &lt; &#34;3.8&#34;-&gt;fastai) (1.0.0) Requirement already satisfied: thinc==7.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy&gt;=2.0.18; python_version &lt; &#34;3.8&#34;-&gt;fastai) (7.4.0) Requirement already satisfied: preshed&lt;3.1.0,&gt;=3.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy&gt;=2.0.18; python_version &lt; &#34;3.8&#34;-&gt;fastai) (3.0.5) Requirement already satisfied: wasabi&lt;1.1.0,&gt;=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy&gt;=2.0.18; python_version &lt; &#34;3.8&#34;-&gt;fastai) (0.8.2) Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from spacy&gt;=2.0.18; python_version &lt; &#34;3.8&#34;-&gt;fastai) (54.1.2) Requirement already satisfied: murmurhash&lt;1.1.0,&gt;=0.28.0 in /usr/local/lib/python3.7/dist-packages (from spacy&gt;=2.0.18; python_version &lt; &#34;3.8&#34;-&gt;fastai) (1.0.5) Requirement already satisfied: plac&lt;1.2.0,&gt;=0.9.6 in /usr/local/lib/python3.7/dist-packages (from spacy&gt;=2.0.18; python_version &lt; &#34;3.8&#34;-&gt;fastai) (1.1.3) Requirement already satisfied: cymem&lt;2.1.0,&gt;=2.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy&gt;=2.0.18; python_version &lt; &#34;3.8&#34;-&gt;fastai) (2.0.5) Requirement already satisfied: srsly&lt;1.1.0,&gt;=1.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy&gt;=2.0.18; python_version &lt; &#34;3.8&#34;-&gt;fastai) (1.0.5) Requirement already satisfied: pyparsing&gt;=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging-&gt;fastai) (2.4.7) Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from torch&gt;=1.0.0-&gt;fastai) (3.7.4.3) Requirement already satisfied: pytz&gt;=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas-&gt;fastai) (2018.9) Requirement already satisfied: python-dateutil&gt;=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas-&gt;fastai) (2.8.1) Requirement already satisfied: cycler&gt;=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib-&gt;fastai) (0.10.0) Requirement already satisfied: kiwisolver&gt;=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib-&gt;fastai) (1.3.1) Requirement already satisfied: importlib-metadata&gt;=0.20; python_version &lt; &#34;3.8&#34; in /usr/local/lib/python3.7/dist-packages (from catalogue&lt;1.1.0,&gt;=0.0.7-&gt;spacy&gt;=2.0.18; python_version &lt; &#34;3.8&#34;-&gt;fastai) (3.7.2) Requirement already satisfied: six&gt;=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil&gt;=2.7.3-&gt;pandas-&gt;fastai) (1.15.0) Requirement already satisfied: zipp&gt;=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata&gt;=0.20; python_version &lt; &#34;3.8&#34;-&gt;catalogue&lt;1.1.0,&gt;=0.0.7-&gt;spacy&gt;=2.0.18; python_version &lt; &#34;3.8&#34;-&gt;fastai) (3.4.1) Collecting git+https://github.com/fastai/fastai.git Cloning https://github.com/fastai/fastai.git to /tmp/pip-req-build-rkpu0wze Running command git clone -q https://github.com/fastai/fastai.git /tmp/pip-req-build-rkpu0wze Requirement already satisfied: pip in /usr/local/lib/python3.7/dist-packages (from fastai==2.2.8) (19.3.1) Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from fastai==2.2.8) (20.9) Collecting fastcore&lt;1.4,&gt;=1.3.8 Downloading https://files.pythonhosted.org/packages/0c/98/60404e2817cff113a6ae4023bc1772e23179408fdf7857fa410551758dfe/fastcore-1.3.19-py3-none-any.whl (53kB) |████████████████████████████████| 61kB 3.2MB/s Collecting torchvision&lt;0.9,&gt;=0.8 Downloading https://files.pythonhosted.org/packages/94/df/969e69a94cff1c8911acb0688117f95e1915becc1e01c73e7960a2c76ec8/torchvision-0.8.2-cp37-cp37m-manylinux1_x86_64.whl (12.8MB) |████████████████████████████████| 12.8MB 251kB/s Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from fastai==2.2.8) (3.2.2) Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from fastai==2.2.8) (1.1.5) Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from fastai==2.2.8) (2.23.0) Requirement already satisfied: pyyaml in /usr/local/lib/python3.7/dist-packages (from fastai==2.2.8) (3.13) Requirement already satisfied: fastprogress&gt;=0.2.4 in /usr/local/lib/python3.7/dist-packages (from fastai==2.2.8) (1.0.0) Requirement already satisfied: pillow&gt;6.0.0 in /usr/local/lib/python3.7/dist-packages (from fastai==2.2.8) (7.0.0) Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from fastai==2.2.8) (0.22.2.post1) Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from fastai==2.2.8) (1.4.1) Requirement already satisfied: spacy&lt;3 in /usr/local/lib/python3.7/dist-packages (from fastai==2.2.8) (2.2.4) Collecting torch&lt;1.8,&gt;=1.7.0 Downloading https://files.pythonhosted.org/packages/90/5d/095ddddc91c8a769a68c791c019c5793f9c4456a688ddd235d6670924ecb/torch-1.7.1-cp37-cp37m-manylinux1_x86_64.whl (776.8MB) |████████████████████████████████| 776.8MB 23kB/s Requirement already satisfied: pyparsing&gt;=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging-&gt;fastai==2.2.8) (2.4.7) Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from torchvision&lt;0.9,&gt;=0.8-&gt;fastai==2.2.8) (1.19.5) Requirement already satisfied: cycler&gt;=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib-&gt;fastai==2.2.8) (0.10.0) Requirement already satisfied: kiwisolver&gt;=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib-&gt;fastai==2.2.8) (1.3.1) Requirement already satisfied: python-dateutil&gt;=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib-&gt;fastai==2.2.8) (2.8.1) Requirement already satisfied: pytz&gt;=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas-&gt;fastai==2.2.8) (2018.9) Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;fastai==2.2.8) (1.24.3) Requirement already satisfied: chardet&lt;4,&gt;=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;fastai==2.2.8) (3.0.4) Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;fastai==2.2.8) (2020.12.5) Requirement already satisfied: idna&lt;3,&gt;=2.5 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;fastai==2.2.8) (2.10) Requirement already satisfied: joblib&gt;=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn-&gt;fastai==2.2.8) (1.0.1) Requirement already satisfied: plac&lt;1.2.0,&gt;=0.9.6 in /usr/local/lib/python3.7/dist-packages (from spacy&lt;3-&gt;fastai==2.2.8) (1.1.3) Requirement already satisfied: cymem&lt;2.1.0,&gt;=2.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy&lt;3-&gt;fastai==2.2.8) (2.0.5) Requirement already satisfied: blis&lt;0.5.0,&gt;=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy&lt;3-&gt;fastai==2.2.8) (0.4.1) Requirement already satisfied: srsly&lt;1.1.0,&gt;=1.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy&lt;3-&gt;fastai==2.2.8) (1.0.5) Requirement already satisfied: preshed&lt;3.1.0,&gt;=3.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy&lt;3-&gt;fastai==2.2.8) (3.0.5) Requirement already satisfied: catalogue&lt;1.1.0,&gt;=0.0.7 in /usr/local/lib/python3.7/dist-packages (from spacy&lt;3-&gt;fastai==2.2.8) (1.0.0) Requirement already satisfied: murmurhash&lt;1.1.0,&gt;=0.28.0 in /usr/local/lib/python3.7/dist-packages (from spacy&lt;3-&gt;fastai==2.2.8) (1.0.5) Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from spacy&lt;3-&gt;fastai==2.2.8) (54.1.2) Requirement already satisfied: thinc==7.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy&lt;3-&gt;fastai==2.2.8) (7.4.0) Requirement already satisfied: wasabi&lt;1.1.0,&gt;=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy&lt;3-&gt;fastai==2.2.8) (0.8.2) Requirement already satisfied: tqdm&lt;5.0.0,&gt;=4.38.0 in /usr/local/lib/python3.7/dist-packages (from spacy&lt;3-&gt;fastai==2.2.8) (4.41.1) Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from torch&lt;1.8,&gt;=1.7.0-&gt;fastai==2.2.8) (3.7.4.3) Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from cycler&gt;=0.10-&gt;matplotlib-&gt;fastai==2.2.8) (1.15.0) Requirement already satisfied: importlib-metadata&gt;=0.20; python_version &lt; &#34;3.8&#34; in /usr/local/lib/python3.7/dist-packages (from catalogue&lt;1.1.0,&gt;=0.0.7-&gt;spacy&lt;3-&gt;fastai==2.2.8) (3.7.2) Requirement already satisfied: zipp&gt;=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata&gt;=0.20; python_version &lt; &#34;3.8&#34;-&gt;catalogue&lt;1.1.0,&gt;=0.0.7-&gt;spacy&lt;3-&gt;fastai==2.2.8) (3.4.1) Building wheels for collected packages: fastai Building wheel for fastai (setup.py) ... done Created wheel for fastai: filename=fastai-2.2.8-cp37-none-any.whl size=192572 sha256=287e8de2ac77f57617a02173ab7859e158debce9521097ed15d58e04f58ddf93 Stored in directory: /tmp/pip-ephem-wheel-cache-4pg39l13/wheels/cf/46/39/b2d08762125ed2376861976ab2c4ac30c029b86e375735d9b8 Successfully built fastai ERROR: torchtext 0.9.0 has requirement torch==1.8.0, but you&#39;ll have torch 1.7.1 which is incompatible. Installing collected packages: fastcore, torch, torchvision, fastai Found existing installation: torch 1.8.0+cu101 Uninstalling torch-1.8.0+cu101: Successfully uninstalled torch-1.8.0+cu101 Found existing installation: torchvision 0.9.0+cu101 Uninstalling torchvision-0.9.0+cu101: Successfully uninstalled torchvision-0.9.0+cu101 Found existing installation: fastai 1.0.61 Uninstalling fastai-1.0.61: Successfully uninstalled fastai-1.0.61 Successfully installed fastai-2.2.8 fastcore-1.3.19 torch-1.7.1 torchvision-0.8.2 |████████████████████████████████| 727kB 5.2MB/s |████████████████████████████████| 1.2MB 8.3MB/s |████████████████████████████████| 51kB 5.2MB/s |████████████████████████████████| 51kB 5.3MB/s . path = Path(&#39;/content/gdrive/MyDrive/ColabNotebooks/CropDisease/train&#39;) def get_y(r): return L(parent_label(r)) . dblock = DataBlock(blocks = (ImageBlock, MultiCategoryBlock), get_items = get_image_files, get_y = get_y, item_tfms=RandomResizedCrop(128, min_scale=0.35)) dls = dblock.dataloaders(path) . dls.valid.show_batch(max_n=20, nrows=5) . learn = cnn_learner(dls, resnet18) . Downloading: &#34;https://download.pytorch.org/models/resnet18-5c106cde.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet18-5c106cde.pth . . x,y = to_cpu(dls.train.one_batch()) activs = learn.model(x) activs.shape . torch.Size([64, 3]) . activs[0] . tensor([ 3.8030, -1.6135, -1.2451], grad_fn=&lt;SelectBackward&gt;) . def binary_cross_entropy(inputs, targets): inputs = inputs.sigmoid() return -torch.where(targets==1, 1-inputs, inputs).log().mean() . loss_func = nn.BCEWithLogitsLoss() loss = loss_func(activs, y) loss . TensorMultiCategory(1.1572, grad_fn=&lt;AliasBackward&gt;) . learn = cnn_learner(dls, resnet50, metrics=partial(accuracy_multi, thresh=0.2)) learn.fine_tune(3, base_lr=3e-3, freeze_epochs=4) . Downloading: &#34;https://download.pytorch.org/models/resnet50-19c8e357.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet50-19c8e357.pth . . epoch train_loss valid_loss accuracy_multi time . 0 | 0.986897 | 0.617047 | 0.467262 | 06:29 | . 1 | 0.866881 | 0.836255 | 0.434524 | 01:39 | . 2 | 0.773805 | 0.767243 | 0.470238 | 01:38 | . 3 | 0.705984 | 0.837690 | 0.455357 | 01:41 | . epoch train_loss valid_loss accuracy_multi time . 0 | 0.419045 | 0.879703 | 0.497024 | 01:40 | . 1 | 0.379041 | 0.891561 | 0.461309 | 01:39 | . 2 | 0.334548 | 0.830140 | 0.479167 | 01:39 | . learn.metrics = partial(accuracy_multi, thresh=0.1) learn.validate() . (#2) [0.8301404118537903,0.4285714328289032] . preds,targs = learn.get_preds() . accuracy_multi(preds, targs, thresh=0.9, sigmoid=False) . TensorBase(0.6607) . xs = torch.linspace(0.05,0.95,29) accs = [accuracy_multi(preds, targs, thresh=i, sigmoid=False) for i in xs] plt.plot(xs,accs); . test_path = &#39;/content/gdrive/MyDrive/ColabNotebooks/CropDisease/test/&#39; . def get_y(r): return L(parent_label(r)) dblock = DataBlock(blocks = (ImageBlock, MultiCategoryBlock), get_items = get_image_files, get_y = get_y, item_tfms=RandomResizedCrop(128, min_scale=0.35)) test_dls = dblock.dataloaders(Path(test_path)) . preds = [] for f in list(Path(test_path).iterdir())[:10]: file_path = Path(f) prediction,predictionIndex,props = learn.predict(f) preds.append(props) file_name = f preds . [tensor([0.6452, 0.2063, 0.1264]), tensor([0.0164, 0.4432, 0.7683]), tensor([0.2779, 0.1468, 0.8119]), tensor([0.2053, 0.1380, 0.7563]), tensor([0.7717, 0.1169, 0.0277]), tensor([0.4008, 0.1284, 0.0804]), tensor([0.1458, 0.5369, 0.3677]), tensor([0.5934, 0.9857, 0.0026]), tensor([0.2113, 0.3282, 0.2828]), tensor([0.8431, 0.1915, 0.0118])] . learn = cnn_learner(dls, resnet18, metrics=partial(accuracy_multi, thresh=0.7)) learn.fine_tune(3, base_lr=3e-3, freeze_epochs=4) . epoch train_loss valid_loss accuracy_multi time . 0 | 0.988854 | 0.715089 | 0.642857 | 01:39 | . 1 | 0.927798 | 0.641900 | 0.717262 | 01:40 | . 2 | 0.853585 | 1.018824 | 0.482143 | 01:37 | . 3 | 0.787563 | 0.619904 | 0.702381 | 01:39 | . epoch train_loss valid_loss accuracy_multi time . 0 | 0.561126 | 0.962537 | 0.491071 | 01:38 | . 1 | 0.492276 | 0.708481 | 0.678571 | 01:39 | . 2 | 0.425803 | 0.710064 | 0.669643 | 01:38 | . learn.metrics = partial(accuracy_multi, thresh=0.1) learn.validate() . (#2) [0.7100639343261719,0.380952388048172] . preds,targs = learn.get_preds() . accuracy_multi(preds, targs, thresh=0.9, sigmoid=False) . TensorBase(0.6667) . xs = torch.linspace(0.05,0.95,29) accs = [accuracy_multi(preds, targs, thresh=i, sigmoid=False) for i in xs] plt.plot(xs,accs); . preds = [] for f in list(Path(test_path).iterdir()): file_path = Path(f) prediction,predictionIndex,props = learn.predict(file_path) file_name = f predictions = f.stem,float(props[0]),float(props[1]),float(props[2]) preds.append(predictions) preds . [(&#39;0GJFRQ&#39;, 0.4072592854499817, 0.2115064263343811, 0.5767456293106079), (&#39;01OJZX&#39;, 0.5468540191650391, 0.2660418152809143, 0.3389742374420166), (&#39;00AQXY&#39;, 0.48992490768432617, 0.03328955918550491, 0.8804430961608887), (&#39;08WLJO&#39;, 0.8353952169418335, 0.107103630900383, 0.4781472682952881), (&#39;085IEC&#39;, 0.8033314347267151, 0.09795712679624557, 0.39156374335289), (&#39;07OXKK&#39;, 0.45186296105384827, 0.09349234402179718, 0.5151895880699158), (&#39;0J3PQ7&#39;, 0.7144035696983337, 0.24455933272838593, 0.2862822115421295), (&#39;0K9T9T&#39;, 0.6431267261505127, 0.36270394921302795, 0.14193609356880188), (&#39;0JIX2C&#39;, 0.17163488268852234, 0.6838212013244629, 0.7874372601509094), (&#39;0E1VTP&#39;, 0.6430211663246155, 0.5702050924301147, 0.16290128231048584), (&#39;008FWT&#39;, 0.5468540191650391, 0.2660418152809143, 0.3389742374420166), (&#39;08O2YE&#39;, 0.6666571497917175, 0.06407009065151215, 0.5766940116882324), (&#39;1BBY5N&#39;, 0.7042202353477478, 0.8663783669471741, 0.013487003743648529), (&#39;0KUZ3P&#39;, 0.9619829654693604, 0.1738349050283432, 0.18721379339694977), (&#39;13GW8I&#39;, 0.5367699265480042, 0.21913059055805206, 0.4656408429145813), (&#39;0KAN82&#39;, 0.4527043104171753, 0.21401488780975342, 0.3280472159385681), (&#39;0Y28MS&#39;, 0.3916499614715576, 0.18275609612464905, 0.44395819306373596), (&#39;1DIKQJ&#39;, 0.7334045767784119, 0.08357463777065277, 0.4633173942565918), (&#39;109IJP&#39;, 0.5942182540893555, 0.22138698399066925, 0.30839279294013977), (&#39;0L5TC8&#39;, 0.840174674987793, 0.6964083909988403, 0.07027032226324081), (&#39;1DVSQ2&#39;, 0.6336361765861511, 0.9164353013038635, 0.01654953695833683), (&#39;0OATVC&#39;, 0.7565314769744873, 0.5625997185707092, 0.0887744203209877), (&#39;0M9DP3&#39;, 0.5998809933662415, 0.06798462569713593, 0.5588100552558899), (&#39;0SB9C6&#39;, 0.442372590303421, 0.31814852356910706, 0.6506339311599731), (&#39;1R1HEY&#39;, 0.6253901720046997, 0.23156298696994781, 0.1792735606431961), (&#39;1NCGYL&#39;, 0.5021693110466003, 0.2666909694671631, 0.24200120568275452), (&#39;1UJG28&#39;, 0.719147264957428, 0.33040645718574524, 0.42000386118888855), (&#39;1WP5MJ&#39;, 0.6487361192703247, 0.09519585222005844, 0.31802043318748474), (&#39;1JPXPR&#39;, 0.4763842225074768, 0.41087058186531067, 0.2304876148700714), (&#39;26MSDN&#39;, 0.4198206663131714, 0.8598561882972717, 0.03629154711961746), (&#39;24NGN1&#39;, 0.48264241218566895, 0.1751178801059723, 0.5658376216888428), (&#39;29EECO&#39;, 0.49989375472068787, 0.15914276242256165, 0.6119880080223083), (&#39;27CXW6&#39;, 0.7001805305480957, 0.15383243560791016, 0.4990878105163574), (&#39;25KFBP&#39;, 0.636019229888916, 0.23303627967834473, 0.7200613617897034), (&#39;1HM2XF&#39;, 0.6810435056686401, 0.5697259306907654, 0.13516049087047577), (&#39;28ZT9U&#39;, 0.3032936453819275, 0.39521855115890503, 0.47381287813186646), (&#39;1WSHC2&#39;, 0.6715722680091858, 0.2878236770629883, 0.31945276260375977), (&#39;1UUIVR&#39;, 0.45425623655319214, 0.043519277125597, 0.8704490661621094), (&#39;29QHAM&#39;, 0.7802399396896362, 0.08196605741977692, 0.5045860409736633), (&#39;2RD61E&#39;, 0.5266896486282349, 0.367106556892395, 0.28880882263183594), (&#39;2JFP1V&#39;, 0.4453812539577484, 0.22760102152824402, 0.7359852194786072), (&#39;2A95RQ&#39;, 0.3276398777961731, 0.10073192417621613, 0.666500985622406), (&#39;2X9AJD&#39;, 0.7044045925140381, 0.08362378925085068, 0.3774229884147644), (&#39;2B7M5Y&#39;, 0.39715591073036194, 0.1822081208229065, 0.6701514720916748), (&#39;2WZMHJ&#39;, 0.618777334690094, 0.33562812209129333, 0.36328744888305664), (&#39;2DAFN2&#39;, 0.36634817719459534, 0.46264854073524475, 0.3256933093070984), (&#39;2UP3BD&#39;, 0.6582464575767517, 0.2618895471096039, 0.32930055260658264), (&#39;2A1J3E&#39;, 0.32007330656051636, 0.1477171629667282, 0.8521182537078857), (&#39;2XCJEM&#39;, 0.5731494426727295, 0.16746221482753754, 0.4802672863006592), (&#39;2NB0GZ&#39;, 0.39636316895484924, 0.42653384804725647, 0.6548486948013306), (&#39;2G71YU&#39;, 0.4406098425388336, 0.5943049788475037, 0.07428702712059021), (&#39;2TLYBN&#39;, 0.39715591073036194, 0.1822081208229065, 0.6701514720916748), (&#39;2Z4K3R&#39;, 0.21837963163852692, 0.44977501034736633, 0.47322720289230347), (&#39;2EJ10A&#39;, 0.5506049394607544, 0.15808221697807312, 0.6527827978134155), (&#39;3QYBX8&#39;, 0.34189870953559875, 0.5363031029701233, 0.11405190825462341), (&#39;31GWYB&#39;, 0.6799553632736206, 0.24578434228897095, 0.26749876141548157), (&#39;3SL5BH&#39;, 0.7905339598655701, 0.21625670790672302, 0.25283998250961304), (&#39;3FJAUN&#39;, 0.6551685929298401, 0.061990316957235336, 0.6619534492492676), (&#39;3FMX4F&#39;, 0.5722669959068298, 0.06954722106456757, 0.5932939648628235), (&#39;3PMT29&#39;, 0.7063183188438416, 0.19492727518081665, 0.23039421439170837), (&#39;3617JB&#39;, 0.7228190302848816, 0.05553171783685684, 0.703391432762146), (&#39;3EU616&#39;, 0.659058153629303, 0.09602446854114532, 0.4144393801689148), (&#39;3HQ3PI&#39;, 0.6562841534614563, 0.16272282600402832, 0.663389265537262), (&#39;3HTS4K&#39;, 0.5007226467132568, 0.10893190652132034, 0.19982439279556274), (&#39;3UY9NX&#39;, 0.2706203758716583, 0.07251258194446564, 0.6039965748786926), (&#39;3RITFB&#39;, 0.5288642048835754, 0.7191258668899536, 0.044521111994981766), (&#39;36J4N7&#39;, 0.6596512198448181, 0.07404300570487976, 0.6962847709655762), (&#39;3LEBBE&#39;, 0.4072592854499817, 0.2115064263343811, 0.5767456293106079), (&#39;3QZDCW&#39;, 0.3907298743724823, 0.8521027565002441, 0.06848767399787903), (&#39;3TC5J1&#39;, 0.5297836661338806, 0.4125061631202698, 0.17023469507694244), (&#39;4BXHHC&#39;, 0.5987499356269836, 0.9813454747200012, 0.009804700501263142), (&#39;44P9JJ&#39;, 0.35250067710876465, 0.16528210043907166, 0.5854324698448181), (&#39;3Y7B9H&#39;, 0.6423031091690063, 0.11033052206039429, 0.3994527757167816), (&#39;45W9CB&#39;, 0.4617033004760742, 0.13735364377498627, 0.543999969959259), (&#39;4C6BNB&#39;, 0.6456478238105774, 0.17374834418296814, 0.37953683733940125), (&#39;45HKLN&#39;, 0.46674302220344543, 0.22358188033103943, 0.4165785014629364), (&#39;43AW2T&#39;, 0.6708212494850159, 0.2528291642665863, 0.3626130223274231), (&#39;44C3D0&#39;, 0.5950819849967957, 0.5759484767913818, 0.028681308031082153), (&#39;476JFR&#39;, 0.5837579965591431, 0.21281588077545166, 0.30041682720184326), (&#39;47Y0EN&#39;, 0.6831371188163757, 0.5637741088867188, 0.08549149334430695), (&#39;3UZ447&#39;, 0.8483112454414368, 0.07621551305055618, 0.39424625039100647), (&#39;4BNHPI&#39;, 0.614246666431427, 0.25661349296569824, 0.42039158940315247), (&#39;3XZTJC&#39;, 0.49790340662002563, 0.20763236284255981, 0.5381462574005127), (&#39;4CCP3Y&#39;, 0.20725856721401215, 0.7196050882339478, 0.40469473600387573), (&#39;4U2CGA&#39;, 0.545565128326416, 0.651777446269989, 0.10492139309644699), (&#39;4DPZTB&#39;, 0.5282486081123352, 0.687067985534668, 0.10040391236543655), (&#39;4GSOVC&#39;, 0.23552803695201874, 0.7015960812568665, 0.49432674050331116), (&#39;4LN6L6&#39;, 0.6067481637001038, 0.6377652287483215, 0.04107647016644478), (&#39;4UUK28&#39;, 0.559784471988678, 0.3163886070251465, 0.3231135308742523), (&#39;4H1YI5&#39;, 0.4584946036338806, 0.25117066502571106, 0.47806310653686523), (&#39;4JIVV3&#39;, 0.5448315739631653, 0.1081535816192627, 0.46877768635749817), (&#39;4J0AQ2&#39;, 0.48405325412750244, 0.04101558402180672, 0.8409993052482605), (&#39;4EMA2X&#39;, 0.7214691042900085, 0.2453230321407318, 0.14873020350933075), (&#39;58RYVJ&#39;, 0.5746706128120422, 0.9480851292610168, 0.011686701327562332), (&#39;59XKQY&#39;, 0.6365755796432495, 0.2891366183757782, 0.35113418102264404), (&#39;50GZHW&#39;, 0.5314697027206421, 0.05162212625145912, 0.731379508972168), (&#39;513FKC&#39;, 0.49458250403404236, 0.17611831426620483, 0.5261767506599426), (&#39;566UF3&#39;, 0.4625503718852997, 0.1597362756729126, 0.7193176746368408), (&#39;56SNDY&#39;, 0.7905339598655701, 0.21625670790672302, 0.25283998250961304), (&#39;54ZZDF&#39;, 0.676844596862793, 0.21108169853687286, 0.3888368010520935), (&#39;56HDSQ&#39;, 0.09246644377708435, 0.594497799873352, 0.5523891448974609), (&#39;4Z2Z6Y&#39;, 0.09138453751802444, 0.3582141697406769, 0.7572187781333923), (&#39;5O37UP&#39;, 0.7015672922134399, 0.11210448294878006, 0.6325264573097229), (&#39;5I8R0P&#39;, 0.5838512778282166, 0.3549894690513611, 0.48989319801330566), (&#39;5IQ4SM&#39;, 0.5050601363182068, 0.21032387018203735, 0.5605893135070801), (&#39;5KLFGH&#39;, 0.4743711054325104, 0.3049747347831726, 0.25612831115722656), (&#39;5LY2EZ&#39;, 0.6253055930137634, 0.5918134450912476, 0.2708269953727722), (&#39;5O7BED&#39;, 0.6253901720046997, 0.23156298696994781, 0.1792735606431961), (&#39;62SE3K&#39;, 0.5321828126907349, 0.6647518277168274, 0.1476830393075943), (&#39;5QVR77&#39;, 0.5283088088035583, 0.2316499501466751, 0.5578207969665527), (&#39;61EW8T&#39;, 0.9174312353134155, 0.033837541937828064, 0.41773971915245056), (&#39;5ZYD0Z&#39;, 0.488735556602478, 0.7330421209335327, 0.13435807824134827), (&#39;630YN8&#39;, 0.5075473785400391, 0.2182544469833374, 0.4354095757007599), (&#39;5RZ9WS&#39;, 0.6001954674720764, 0.22128476202487946, 0.4520999491214752), (&#39;643083&#39;, 0.8133545517921448, 0.33416420221328735, 0.1254468858242035), (&#39;5ZV470&#39;, 0.5942494869232178, 0.6701600551605225, 0.1420540064573288), (&#39;6TBILJ&#39;, 0.606170654296875, 0.28711116313934326, 0.21088330447673798), (&#39;6CSSKO&#39;, 0.36141088604927063, 0.13605427742004395, 0.8744701147079468), (&#39;6MVSPH&#39;, 0.40103474259376526, 0.40824609994888306, 0.19848230481147766), (&#39;69KEFW&#39;, 0.5021693110466003, 0.2666909694671631, 0.24200120568275452), (&#39;6OR8LX&#39;, 0.6193221211433411, 0.5115029215812683, 0.1394946277141571), (&#39;6RQGO4&#39;, 0.5045830607414246, 0.07897123694419861, 0.9114812612533569), (&#39;66BJ7B&#39;, 0.3747011125087738, 0.5089259147644043, 0.20451347529888153), (&#39;65ZIX2&#39;, 0.25030556321144104, 0.3034995496273041, 0.5024648308753967), (&#39;73LCCX&#39;, 0.38268953561782837, 0.100283682346344, 0.7183011174201965), (&#39;770SDM&#39;, 0.7904950976371765, 0.17178770899772644, 0.09138976782560349), (&#39;64NM6J&#39;, 0.3698505163192749, 0.10909822583198547, 0.737768828868866), (&#39;6VCZTR&#39;, 0.7429550886154175, 0.3868759870529175, 0.37986260652542114), (&#39;70N4MI&#39;, 0.46667352318763733, 0.29059794545173645, 0.4421710669994354), (&#39;7FBK0I&#39;, 0.6679116487503052, 0.20193257927894592, 0.06354823708534241), (&#39;7OIDOG&#39;, 0.9005986452102661, 0.09014980494976044, 0.3752882182598114), (&#39;7K49J7&#39;, 0.3375673294067383, 0.9804085493087769, 0.005899930372834206), (&#39;7HWYNO&#39;, 0.5034246444702148, 0.13668714463710785, 0.7052525281906128), (&#39;7QXINN&#39;, 0.5789024829864502, 0.2424015998840332, 0.3756462335586548), (&#39;7C09OS&#39;, 0.7044045925140381, 0.08362378925085068, 0.3774229884147644), (&#39;7FIYNT&#39;, 0.4073598384857178, 0.19866378605365753, 0.5771568417549133), (&#39;7R79YI&#39;, 0.7673730254173279, 0.1252053678035736, 0.5010579824447632), (&#39;7HYV1S&#39;, 0.6452075839042664, 0.18437014520168304, 0.353346586227417), (&#39;7L8I9W&#39;, 0.08522052317857742, 0.8773273825645447, 0.43200013041496277), (&#39;7FRVBT&#39;, 0.5699389576911926, 0.14761780202388763, 0.4289011061191559), (&#39;7AJUBC&#39;, 0.5566056370735168, 0.6156555414199829, 0.08678190410137177), (&#39;7A27J0&#39;, 0.6001954674720764, 0.22128476202487946, 0.4520999491214752), (&#39;8DBV24&#39;, 0.3098756670951843, 0.45600858330726624, 0.45692116022109985), (&#39;7YRETU&#39;, 0.7814951539039612, 0.2721642851829529, 0.25328466296195984), (&#39;8K268S&#39;, 0.18795306980609894, 0.06936640292406082, 0.7715888023376465), (&#39;87XMNV&#39;, 0.27071085572242737, 0.2686924636363983, 0.84834223985672), (&#39;8MCLGV&#39;, 0.6498141288757324, 0.2776325047016144, 0.3294871747493744), (&#39;7TQ2FE&#39;, 0.5548000335693359, 0.14054341614246368, 0.6251978874206543), (&#39;7VKX0H&#39;, 0.6760908365249634, 0.32715752720832825, 0.23941944539546967), (&#39;8BK2PD&#39;, 0.30356860160827637, 0.11883299052715302, 0.6073285937309265), (&#39;84KKPV&#39;, 0.15243126451969147, 0.04231438785791397, 0.9761878848075867), (&#39;86M6FQ&#39;, 0.8251618146896362, 0.7903261780738831, 0.06939470022916794), (&#39;85YFKR&#39;, 0.4080502986907959, 0.5128340721130371, 0.202394038438797), (&#39;83Z7CK&#39;, 0.6551753282546997, 0.7724262475967407, 0.018660645931959152), (&#39;7WHRMW&#39;, 0.7258238196372986, 0.14973752200603485, 0.6328291893005371), (&#39;8B92KC&#39;, 0.44000244140625, 0.1597764492034912, 0.6215535998344421), (&#39;8EGYGH&#39;, 0.6598669290542603, 0.11525261402130127, 0.5639764070510864), (&#39;84FZDZ&#39;, 0.9068553447723389, 0.18039670586585999, 0.04635562375187874), (&#39;8LJHN6&#39;, 0.35200703144073486, 0.13117468357086182, 0.6458964943885803), (&#39;8NRRD6&#39;, 0.35591307282447815, 0.3909166753292084, 0.1934177726507187), (&#39;92BY2V&#39;, 0.43615248799324036, 0.49237334728240967, 0.23771439492702484), (&#39;8ZA12G&#39;, 0.8312790989875793, 0.21642275154590607, 0.09142863750457764), (&#39;8WNRN5&#39;, 0.38827797770500183, 0.10131363570690155, 0.802627444267273), (&#39;8PM0C4&#39;, 0.7434990406036377, 0.3460535407066345, 0.4001893103122711), (&#39;991ULH&#39;, 0.6112979650497437, 0.3613045811653137, 0.6834973692893982), (&#39;9PZOH9&#39;, 0.41362905502319336, 0.07906430959701538, 0.796214759349823), (&#39;8TIH31&#39;, 0.3032936453819275, 0.39521855115890503, 0.47381287813186646), (&#39;8W40NI&#39;, 0.6389908790588379, 0.12344817817211151, 0.6302547454833984), (&#39;98B5MA&#39;, 0.4893752336502075, 0.2688744366168976, 0.3664413094520569), (&#39;8WTRO2&#39;, 0.9442381262779236, 0.0976075753569603, 0.2893451154232025), (&#39;8UWVT9&#39;, 0.5060656070709229, 0.255820095539093, 0.44370535016059875), (&#39;99LHT9&#39;, 0.3911963999271393, 0.2873334586620331, 0.36261820793151855), (&#39;9K455I&#39;, 0.5062880516052246, 0.10162971168756485, 0.8223293423652649), (&#39;8MPF2S&#39;, 0.48355841636657715, 0.4580335021018982, 0.20097601413726807), (&#39;ACCC3M&#39;, 0.17587578296661377, 0.9413837194442749, 0.03413581848144531), (&#39;AQNWMU&#39;, 0.6305015087127686, 0.8293827772140503, 0.05632595345377922), (&#39;ADM9WH&#39;, 0.8104308247566223, 0.07853937894105911, 0.6028751730918884), (&#39;A35NKL&#39;, 0.5782908797264099, 0.21378742158412933, 0.41077253222465515), (&#39;A8BFPN&#39;, 0.5880550146102905, 0.18930473923683167, 0.4265538454055786), (&#39;A22GNM&#39;, 0.4073598384857178, 0.19866378605365753, 0.5771568417549133), (&#39;A5R7N5&#39;, 0.2864309847354889, 0.5059699416160583, 0.09093115478754044), (&#39;A3XMJG&#39;, 0.5149407982826233, 0.193128302693367, 0.5305717587471008), (&#39;9ZUXDP&#39;, 0.5566056370735168, 0.6156555414199829, 0.08678190410137177), (&#39;AJTPKP&#39;, 0.6959857940673828, 0.29577958583831787, 0.6570808291435242), (&#39;AQ9G8P&#39;, 0.6239798069000244, 0.2716098725795746, 0.14942647516727448), (&#39;AD54KD&#39;, 0.5475115776062012, 0.08324218541383743, 0.6626731753349304), (&#39;A71S2G&#39;, 0.7684091329574585, 0.3010394275188446, 0.07719546556472778), (&#39;9QX0BV&#39;, 0.49074095487594604, 0.04711419343948364, 0.5754906535148621), (&#39;AA2RK9&#39;, 0.5475115776062012, 0.08324218541383743, 0.6626731753349304), (&#39;ASWEM4&#39;, 0.6016619801521301, 0.09466012567281723, 0.6556599736213684), (&#39;B7A4WN&#39;, 0.5536395907402039, 0.5316885113716125, 0.34763598442077637), (&#39;BDVR3G&#39;, 0.36750203371047974, 0.15461306273937225, 0.6846113204956055), (&#39;BE0SDD&#39;, 0.4317074120044708, 0.4670819044113159, 0.14885105192661285), (&#39;B5Z53V&#39;, 0.7904852628707886, 0.021217623725533485, 0.7455894947052002), (&#39;B8BA82&#39;, 0.7404030561447144, 0.035145897418260574, 0.7455354928970337), (&#39;BM4CGJ&#39;, 0.5653835535049438, 0.459288626909256, 0.1501196324825287), (&#39;B6767Y&#39;, 0.352604478597641, 0.5304545164108276, 0.2606442868709564), (&#39;AXVIDD&#39;, 0.38783344626426697, 0.3998435437679291, 0.4877525866031647), (&#39;B9CYAF&#39;, 0.4640805125236511, 0.7070528864860535, 0.30300530791282654), (&#39;BXDDND&#39;, 0.6975101232528687, 0.15928995609283447, 0.6418635249137878), (&#39;C00UDR&#39;, 0.6232030987739563, 0.11525959521532059, 0.7355018854141235), (&#39;C3HVUP&#39;, 0.12951059639453888, 0.9381033182144165, 0.03780939429998398), (&#39;C4TEDN&#39;, 0.4961725175380707, 0.039934705942869186, 0.7840397357940674), (&#39;C9K49P&#39;, 0.9606189727783203, 0.8734838366508484, 0.00907253660261631), (&#39;BR5HS1&#39;, 0.8104308247566223, 0.07853937894105911, 0.6028751730918884), (&#39;CA6QE3&#39;, 0.6783279776573181, 0.5795390605926514, 0.06263256072998047), (&#39;BY3KQK&#39;, 0.42860352993011475, 0.1876184344291687, 0.5046839118003845), (&#39;BN5L96&#39;, 0.7802371978759766, 0.15884281694889069, 0.42131561040878296), (&#39;C12J44&#39;, 0.41812676191329956, 0.11099530756473541, 0.5839481353759766), (&#39;C8F2PR&#39;, 0.8368167281150818, 0.1665193736553192, 0.4796696603298187), (&#39;C3LIDU&#39;, 0.2985554337501526, 0.6074332594871521, 0.2797895669937134), (&#39;C7ORQ3&#39;, 0.4430757164955139, 0.049488335847854614, 0.8813019394874573), (&#39;C96KHN&#39;, 0.6271070837974548, 0.21730348467826843, 0.08143997192382812), (&#39;CVP2F1&#39;, 0.9606189727783203, 0.8734838366508484, 0.00907253660261631), (&#39;CJI2ZI&#39;, 0.6582464575767517, 0.2618895471096039, 0.32930055260658264), (&#39;CRAO3W&#39;, 0.6521862149238586, 0.5428706407546997, 0.08432316035032272), (&#39;CS8I7X&#39;, 0.2554725706577301, 0.7904626727104187, 0.1255660057067871), (&#39;CVJKQ0&#39;, 0.7206993699073792, 0.9115227460861206, 0.018454818055033684), (&#39;CW0A8P&#39;, 0.7696821093559265, 0.29492422938346863, 0.6743337512016296), (&#39;CJKDD9&#39;, 0.41362905502319336, 0.07906430959701538, 0.796214759349823), (&#39;CTKEVP&#39;, 0.6321131587028503, 0.10053110122680664, 0.511448085308075), (&#39;CON3Q6&#39;, 0.40741994976997375, 0.1670200526714325, 0.30750080943107605), (&#39;CWFUHX&#39;, 0.6423031091690063, 0.11033052206039429, 0.3994527757167816), (&#39;D47QCW&#39;, 0.8133545517921448, 0.33416420221328735, 0.1254468858242035), (&#39;DAE2E6&#39;, 0.36731958389282227, 0.22495900094509125, 0.3198375701904297), (&#39;DFJMOK&#39;, 0.6595176458358765, 0.3874014914035797, 0.2739088833332062), (&#39;CZV7V8&#39;, 0.2928422689437866, 0.49786078929901123, 0.4130091369152069), (&#39;D6TACK&#39;, 0.5268824100494385, 0.10007748752832413, 0.72525554895401), (&#39;CZEKO2&#39;, 0.7504724264144897, 0.18465346097946167, 0.3028189539909363), (&#39;D9POPP&#39;, 0.5148859620094299, 0.33888551592826843, 0.3281196653842926), (&#39;DJ2O5O&#39;, 0.5631328821182251, 0.19897086918354034, 0.5374870300292969), (&#39;DA6ERF&#39;, 0.6080819964408875, 0.5635468363761902, 0.0787213146686554), (&#39;DSPYUI&#39;, 0.5573052167892456, 0.10632772743701935, 0.5064128041267395), (&#39;DT051P&#39;, 0.6975101232528687, 0.15928995609283447, 0.6418635249137878), (&#39;DWS774&#39;, 0.2352946400642395, 0.03335212543606758, 0.8966674208641052), (&#39;DSTYNQ&#39;, 0.6775310635566711, 0.2857336699962616, 0.23563049733638763), (&#39;DMWVNR&#39;, 0.5261472463607788, 0.26540428400039673, 0.2625808119773865), (&#39;DK3M7U&#39;, 0.3434671461582184, 0.09867330640554428, 0.7902994155883789), (&#39;DSKH8C&#39;, 0.4512702226638794, 0.13795499503612518, 0.5851044058799744), (&#39;DPN5Y4&#39;, 0.6028106212615967, 0.18108946084976196, 0.2694731652736664), (&#39;E830B4&#39;, 0.542425811290741, 0.17738249897956848, 0.450255423784256), (&#39;ELRIT5&#39;, 0.7084540724754333, 0.11275356262922287, 0.019253278151154518), (&#39;EF1VE8&#39;, 0.08665671199560165, 0.07820097357034683, 0.9322500824928284), (&#39;E5Y6C2&#39;, 0.44461479783058167, 0.10441382974386215, 0.6395294666290283), (&#39;ELQYW8&#39;, 0.8896443843841553, 0.07528430223464966, 0.13126686215400696), (&#39;E3UUAH&#39;, 0.5802319645881653, 0.24367700517177582, 0.4199216961860657), (&#39;DZKYZG&#39;, 0.6325679421424866, 0.19733934104442596, 0.4499448537826538), (&#39;ENU2K6&#39;, 0.5981723666191101, 0.17306511104106903, 0.5845891833305359), (&#39;E7U5LA&#39;, 0.5279175043106079, 0.13812623918056488, 0.40713950991630554), (&#39;EO5HB4&#39;, 0.3949336111545563, 0.11948633939027786, 0.7205971479415894), (&#39;EMTPG4&#39;, 0.3686709702014923, 0.13485999405384064, 0.8574482798576355), (&#39;EK02MQ&#39;, 0.38783344626426697, 0.3998435437679291, 0.4877525866031647), (&#39;E1UT92&#39;, 0.38875553011894226, 0.24022065103054047, 0.49430784583091736), (&#39;ELN2OX&#39;, 0.6543339490890503, 0.14699938893318176, 0.3940706253051758), (&#39;EN5EK8&#39;, 0.2254350632429123, 0.24235527217388153, 0.7206757664680481), (&#39;ENCNA4&#39;, 0.7118452191352844, 0.630485475063324, 0.07006309926509857), (&#39;EJJNP8&#39;, 0.24395667016506195, 0.019403863698244095, 0.9425759315490723), (&#39;F0BMJU&#39;, 0.7296551465988159, 0.1061318963766098, 0.15530993044376373), (&#39;EXK568&#39;, 0.3419806659221649, 0.16644655168056488, 0.5125564932823181), (&#39;F3ST2N&#39;, 0.5360789895057678, 0.19653204083442688, 0.5740436911582947), (&#39;FDYILZ&#39;, 0.1860327571630478, 0.08223947137594223, 0.9435626864433289), (&#39;F3J2L6&#39;, 0.35488438606262207, 0.5002325177192688, 0.23613156378269196), (&#39;F0YDOW&#39;, 0.7157721519470215, 0.4643234610557556, 0.20131628215312958), (&#39;EYM7FV&#39;, 0.4584946036338806, 0.25117066502571106, 0.47806310653686523), (&#39;ERHSBV&#39;, 0.49021580815315247, 0.40837812423706055, 0.3430796265602112), (&#39;EY1RVI&#39;, 0.5897125005722046, 0.20331823825836182, 0.6733633875846863), (&#39;ETB5K9&#39;, 0.8817218542098999, 0.091807521879673, 0.25848135352134705), (&#39;F16156&#39;, 0.4498375356197357, 0.06987028568983078, 0.8248440623283386), (&#39;F254OR&#39;, 0.5596548914909363, 0.13528212904930115, 0.6434980630874634), (&#39;FCSIZW&#39;, 0.551720142364502, 0.0831625759601593, 0.48085257411003113), (&#39;ETFAA4&#39;, 0.5802319645881653, 0.24367700517177582, 0.4199216961860657), (&#39;G0TFZN&#39;, 0.4614235460758209, 0.46306562423706055, 0.25510740280151367), (&#39;FDZAG6&#39;, 0.7247244119644165, 0.4572983980178833, 0.20298059284687042), (&#39;FR69CL&#39;, 0.20991216599941254, 0.28004878759384155, 0.7350510954856873), (&#39;FL2RE2&#39;, 0.23279611766338348, 0.662871241569519, 0.133305162191391), (&#39;FKPU4K&#39;, 0.5256937742233276, 0.8068207502365112, 0.07046334445476532), (&#39;G2VH1H&#39;, 0.48109978437423706, 0.7028115391731262, 0.21060632169246674), (&#39;FKJ27S&#39;, 0.3864304721355438, 0.17685146629810333, 0.46303772926330566), (&#39;FQ76KG&#39;, 0.39715591073036194, 0.1822081208229065, 0.6701514720916748), (&#39;FFHGCR&#39;, 0.6081014275550842, 0.10178221017122269, 0.7498736381530762), (&#39;G1S125&#39;, 0.3757160007953644, 0.1602071225643158, 0.7522619962692261), (&#39;FNLBVY&#39;, 0.5333432555198669, 0.21159261465072632, 0.4702441990375519), (&#39;G29JG9&#39;, 0.42696693539619446, 0.40254631638526917, 0.09130670875310898), (&#39;FWIQO3&#39;, 0.29466956853866577, 0.2955484390258789, 0.8837389945983887), (&#39;FSWBAA&#39;, 0.5932323336601257, 0.07769133150577545, 0.7014756202697754), (&#39;GRR4M5&#39;, 0.659058153629303, 0.09602446854114532, 0.4144393801689148), (&#39;GSVCRY&#39;, 0.5327727794647217, 0.27546676993370056, 0.21696005761623383), (&#39;GRI4UU&#39;, 0.6754449605941772, 0.16497235000133514, 0.47813478112220764), (&#39;G7WKXC&#39;, 0.053277283906936646, 0.9960274696350098, 0.003415693063288927), (&#39;G9QN1Q&#39;, 0.8956258296966553, 0.06382690370082855, 0.3503546118736267), (&#39;G62S7Q&#39;, 0.28168782591819763, 0.4626486301422119, 0.22991396486759186), (&#39;GDYXBN&#39;, 0.5904849171638489, 0.036937229335308075, 0.8407153487205505), (&#39;G8036S&#39;, 0.44121354818344116, 0.10741310566663742, 0.7667559385299683), (&#39;GE2DXP&#39;, 0.23655271530151367, 0.1062275841832161, 0.8452200889587402), (&#39;G7171A&#39;, 0.8673345446586609, 0.0339692197740078, 0.3791908919811249), (&#39;G9LU3H&#39;, 0.5942182540893555, 0.22138698399066925, 0.30839279294013977), (&#39;GNU6AP&#39;, 0.5959545373916626, 0.1307801753282547, 0.6266399025917053), (&#39;GFEE4O&#39;, 0.5741206407546997, 0.28718745708465576, 0.22955434024333954), (&#39;G5P8A1&#39;, 0.3622686266899109, 0.9599068760871887, 0.04580579325556755), (&#39;GAV4C1&#39;, 0.4083739221096039, 0.3511752784252167, 0.48615774512290955), (&#39;H3XNNP&#39;, 0.5504838228225708, 0.8190309405326843, 0.03662749007344246), (&#39;H85TRT&#39;, 0.48405325412750244, 0.04101558402180672, 0.8409993052482605), (&#39;GTQC1H&#39;, 0.3359864056110382, 0.3109707534313202, 0.4876197278499603), (&#39;H70U3U&#39;, 0.8472211956977844, 0.2136675864458084, 0.13236571848392487), (&#39;H11R0E&#39;, 0.7388819456100464, 0.12956702709197998, 0.1566449999809265), (&#39;GVRCWM&#39;, 0.5081445574760437, 0.07074984163045883, 0.6132895946502686), (&#39;GV8I76&#39;, 0.6772286891937256, 0.07607705891132355, 0.5979217886924744), (&#39;HECXGM&#39;, 0.5506296157836914, 0.5534416437149048, 0.14732208847999573), (&#39;GSWZ1G&#39;, 0.5696244239807129, 0.23791837692260742, 0.6112881302833557), (&#39;GWXVSQ&#39;, 0.6578177809715271, 0.513179361820221, 0.13543181121349335), (&#39;H5L2XQ&#39;, 0.49356797337532043, 0.17508544027805328, 0.7057597637176514), (&#39;H0709X&#39;, 0.48173514008522034, 0.35928165912628174, 0.22757501900196075), (&#39;H091MF&#39;, 0.36213380098342896, 0.4649096131324768, 0.2709812521934509), (&#39;HAX88W&#39;, 0.44489654898643494, 0.16263337433338165, 0.5302649736404419), (&#39;HFV4BK&#39;, 0.5404074788093567, 0.5677288174629211, 0.1821250319480896), (&#39;GU40NL&#39;, 0.5927929282188416, 0.13205254077911377, 0.37237945199012756), (&#39;HPKJP6&#39;, 0.31081920862197876, 0.47852858901023865, 0.20946288108825684), (&#39;I0VHG7&#39;, 0.6762535572052002, 0.40320444107055664, 0.13106778264045715), (&#39;HHE4UD&#39;, 0.5186667442321777, 0.9573909640312195, 0.015968739986419678), (&#39;I0AOAD&#39;, 0.3453294634819031, 0.8009225130081177, 0.09143960475921631), (&#39;HQ3927&#39;, 0.2352946400642395, 0.03335212543606758, 0.8966674208641052), (&#39;I1ZX1E&#39;, 0.7803240418434143, 0.38922548294067383, 0.20082218945026398), (&#39;HUQX87&#39;, 0.5306775569915771, 0.4115656614303589, 0.25508981943130493), (&#39;HZSNLW&#39;, 0.50203937292099, 0.41641291975975037, 0.33802658319473267), (&#39;HK4HT6&#39;, 0.6950538754463196, 0.5317124724388123, 0.11494285613298416), (&#39;HHFCSR&#39;, 0.6170523166656494, 0.19246889650821686, 0.5100734233856201), (&#39;I2GA4N&#39;, 0.6542876958847046, 0.22043351829051971, 0.360980749130249), (&#39;HGSMHR&#39;, 0.5325503945350647, 0.35546985268592834, 0.2947731614112854), (&#39;IG612B&#39;, 0.47823429107666016, 0.3341299891471863, 0.6603424549102783), (&#39;JCT42O&#39;, 0.5314697027206421, 0.05162212625145912, 0.731379508972168), (&#39;I3C3YL&#39;, 0.6819301843643188, 0.1859656274318695, 0.28248587250709534), (&#39;ITA5CF&#39;, 0.642796516418457, 0.15409167110919952, 0.31155821681022644), (&#39;IMP5ZT&#39;, 0.5746706128120422, 0.9480851292610168, 0.011686701327562332), (&#39;IN6BS9&#39;, 0.5615110397338867, 0.4609105885028839, 0.0941944420337677), (&#39;IQD2S6&#39;, 0.3157438337802887, 0.37814757227897644, 0.310015469789505), (&#39;IGS79C&#39;, 0.394039124250412, 0.742247998714447, 0.05883726105093956), (&#39;I83ILL&#39;, 0.7867522239685059, 0.18201076984405518, 0.1297195851802826), (&#39;IGFK64&#39;, 0.24834613502025604, 0.4370410442352295, 0.5349680781364441), (&#39;I6JD81&#39;, 0.8269265294075012, 0.17183703184127808, 0.279048353433609), (&#39;IR4P99&#39;, 0.16314947605133057, 0.1964615136384964, 0.7391723990440369), (&#39;I5VAXH&#39;, 0.4038623869419098, 0.2978900969028473, 0.3957677483558655), (&#39;IFUPRC&#39;, 0.6209463477134705, 0.08448229730129242, 0.5455585718154907), (&#39;IDASA8&#39;, 0.6300017237663269, 0.3300222158432007, 0.34592145681381226), (&#39;INMX1M&#39;, 0.6666029691696167, 0.35954564809799194, 0.2750854790210724), (&#39;JLG9QX&#39;, 0.49803075194358826, 0.2492329478263855, 0.7095455527305603), (&#39;KH8YZM&#39;, 0.49932339787483215, 0.12705010175704956, 0.4220728278160095), (&#39;JLQPWF&#39;, 0.5846839547157288, 0.444448858499527, 0.08386250585317612), (&#39;L1R3KO&#39;, 0.7063183188438416, 0.19492727518081665, 0.23039421439170837), (&#39;L2JR4M&#39;, 0.49356964230537415, 0.1376778483390808, 0.512942910194397), (&#39;JD4FQG&#39;, 0.558250367641449, 0.9395276308059692, 0.059939220547676086), (&#39;KYH823&#39;, 0.37832576036453247, 0.9509688019752502, 0.005414649378508329), (&#39;KR5A3P&#39;, 0.1037977859377861, 0.28055551648139954, 0.8308649659156799), (&#39;KO0PV1&#39;, 0.5009458065032959, 0.1365419626235962, 0.39508017897605896), (&#39;JHIN63&#39;, 0.5712995529174805, 0.09317877143621445, 0.6417238116264343), (&#39;KJ90GY&#39;, 0.11971390247344971, 0.22914648056030273, 0.825517475605011), (&#39;L5J6RO&#39;, 0.3276762366294861, 0.2684010863304138, 0.6987603306770325), (&#39;JGIDPU&#39;, 0.41981393098831177, 0.6563445329666138, 0.1796303242444992), (&#39;K74DSX&#39;, 0.5448315739631653, 0.1081535816192627, 0.46877768635749817), (&#39;JJFDPS&#39;, 0.7059094905853271, 0.21004976332187653, 0.6483944058418274), (&#39;K8I8PV&#39;, 0.49341002106666565, 0.3714136779308319, 0.24300047755241394), (&#39;K4KG21&#39;, 0.4444156587123871, 0.2720267176628113, 0.5808985233306885), (&#39;KHL8RD&#39;, 0.49210408329963684, 0.22832894325256348, 0.11987391859292984), (&#39;LFJN5F&#39;, 0.8100025057792664, 0.16110536456108093, 0.38937392830848694), (&#39;LGMAZF&#39;, 0.7952277660369873, 0.1675618290901184, 0.32299548387527466), (&#39;LHT58R&#39;, 0.708267092704773, 0.28213074803352356, 0.41594189405441284), (&#39;L9U7RS&#39;, 0.7614691853523254, 0.41367191076278687, 0.150828555226326), (&#39;LF90OY&#39;, 0.3747011125087738, 0.5089259147644043, 0.20451347529888153), (&#39;LIP25C&#39;, 0.40988484025001526, 0.11215371638536453, 0.6135752201080322), (&#39;LJ48OC&#39;, 0.41947776079177856, 0.13335973024368286, 0.5513875484466553), (&#39;L6VGHO&#39;, 0.20188988745212555, 0.1584683507680893, 0.81165611743927), (&#39;LB8UML&#39;, 0.5472756624221802, 0.12972193956375122, 0.5214276313781738), (&#39;LA5BBQ&#39;, 0.7754682898521423, 0.07275953143835068, 0.4681936204433441), (&#39;L7W1SK&#39;, 0.8483112454414368, 0.07621551305055618, 0.39424625039100647), (&#39;LE4WVZ&#39;, 0.3845221996307373, 0.18122199177742004, 0.7426696419715881), (&#39;LGDGLF&#39;, 0.6256951093673706, 0.16133445501327515, 0.5694662928581238), (&#39;LGF6GU&#39;, 0.6775310635566711, 0.2857336699962616, 0.23563049733638763), (&#39;LY6HHL&#39;, 0.3907298743724823, 0.8521027565002441, 0.06848767399787903), (&#39;LNYFAZ&#39;, 0.5775845646858215, 0.1010574921965599, 0.5841270685195923), (&#39;M9RQNE&#39;, 0.5147335529327393, 0.14047516882419586, 0.7764788269996643), (&#39;LN8U2L&#39;, 0.6500150561332703, 0.11762800067663193, 0.6795544028282166), (&#39;LL93NP&#39;, 0.8033314347267151, 0.09795712679624557, 0.39156374335289), (&#39;M2I0TS&#39;, 0.45667216181755066, 0.46409592032432556, 0.47457796335220337), (&#39;MB44H4&#39;, 0.9358536005020142, 0.10310694575309753, 0.4884980022907257), (&#39;LTKPZ8&#39;, 0.676801860332489, 0.043096873909235, 0.6297643780708313), (&#39;LQLMT6&#39;, 0.7802371978759766, 0.15884281694889069, 0.42131561040878296), (&#39;LK4LU1&#39;, 0.8031752705574036, 0.16007578372955322, 0.06994641572237015), (&#39;M9PTBN&#39;, 0.4786563813686371, 0.33582451939582825, 0.4753134846687317), (&#39;LT0KA0&#39;, 0.5368308424949646, 0.13053567707538605, 0.5199741125106812), (&#39;LYU01I&#39;, 0.9236595630645752, 0.40589430928230286, 0.1272985190153122), (&#39;LQRWP1&#39;, 0.2629541754722595, 0.1789526641368866, 0.7345296740531921), (&#39;LNHUUG&#39;, 0.5164303779602051, 0.15377727150917053, 0.8109021186828613), (&#39;MO69MI&#39;, 0.370004266500473, 0.09725750237703323, 0.7926891446113586), (&#39;N0HX6Y&#39;, 0.44733020663261414, 0.05894487351179123, 0.8361691832542419), (&#39;MD84QB&#39;, 0.7334045767784119, 0.08357463777065277, 0.4633173942565918), (&#39;MG6QMS&#39;, 0.4625503718852997, 0.1597362756729126, 0.7193176746368408), (&#39;NBAOVK&#39;, 0.5302481055259705, 0.14405517280101776, 0.6570466756820679), (&#39;MCWG84&#39;, 0.5469164848327637, 0.23836001753807068, 0.27407488226890564), (&#39;MU5BXX&#39;, 0.8673345446586609, 0.0339692197740078, 0.3791908919811249), (&#39;NGZ2X2&#39;, 0.21271762251853943, 0.46381333470344543, 0.6026028394699097), (&#39;MZHRWG&#39;, 0.07470983266830444, 0.13021217286586761, 0.8836162090301514), (&#39;N567QP&#39;, 0.7429550886154175, 0.3868759870529175, 0.37986260652542114), (&#39;NDDDKK&#39;, 0.8312790989875793, 0.21642275154590607, 0.09142863750457764), (&#39;MFWPB0&#39;, 0.6865622401237488, 0.3276316523551941, 0.30174022912979126), (&#39;MKUVEU&#39;, 0.3301534354686737, 0.13571949303150177, 0.6599507927894592), (&#39;NLB59M&#39;, 0.5696264505386353, 0.24233897030353546, 0.07293323427438736), (&#39;NPQJUS&#39;, 0.5762381553649902, 0.10602439939975739, 0.49252501130104065), (&#39;O2A1R8&#39;, 0.4129849970340729, 0.6121841669082642, 0.25989392399787903), (&#39;NK8R1S&#39;, 0.6011307835578918, 0.07442113012075424, 0.7696645855903625), (&#39;O2N892&#39;, 0.7943190336227417, 0.13157357275485992, 0.46281975507736206), (&#39;NQUCTF&#39;, 0.494755357503891, 0.19633959233760834, 0.5511846542358398), (&#39;NYJHQI&#39;, 0.5858067274093628, 0.11245490610599518, 0.6032364964485168), (&#39;NH3AZE&#39;, 0.47690677642822266, 0.393239825963974, 0.3389820158481598), (&#39;NN5F6I&#39;, 0.7228962182998657, 0.8530648350715637, 0.03305429220199585), (&#39;O8QEI5&#39;, 0.5540828108787537, 0.9961840510368347, 0.00039420719258487225), (&#39;NXCA0Q&#39;, 0.7684598565101624, 0.8328430652618408, 0.021398773416876793), (&#39;O7V8IB&#39;, 0.6569410562515259, 0.21957522630691528, 0.5211187601089478), (&#39;NS8DVC&#39;, 0.5269899368286133, 0.3631533682346344, 0.1621464192867279), (&#39;NURNH0&#39;, 0.537578821182251, 0.3770899772644043, 0.5746018886566162), (&#39;ODZH9T&#39;, 0.24326391518115997, 0.24557964503765106, 0.5064585208892822), (&#39;OHDGS7&#39;, 0.5471551418304443, 0.2704422175884247, 0.44081252813339233), (&#39;OSMWTE&#39;, 0.48533114790916443, 0.07878433167934418, 0.597495436668396), (&#39;OE2KYL&#39;, 0.35547804832458496, 0.3705935478210449, 0.6176123023033142), (&#39;OLIZFO&#39;, 0.6704755425453186, 0.37225139141082764, 0.28212931752204895), (&#39;OPYUWH&#39;, 0.5943887829780579, 0.10685189813375473, 0.5924974679946899), (&#39;OCEBS4&#39;, 0.6990498900413513, 0.14013764262199402, 0.46594101190567017), (&#39;OVOLCQ&#39;, 0.5030880570411682, 0.045054249465465546, 0.824093759059906), (&#39;OCUL7A&#39;, 0.6211683750152588, 0.5328221917152405, 0.17539389431476593), (&#39;OK5TQU&#39;, 0.48173391819000244, 0.3435310125350952, 0.37311893701553345), (&#39;OOALVQ&#39;, 0.09138453751802444, 0.3582141697406769, 0.7572187781333923), (&#39;ON9PIT&#39;, 0.5331345200538635, 0.234665647149086, 0.5271012783050537), (&#39;OBZOCF&#39;, 0.4888003170490265, 0.22663547098636627, 0.5498918890953064), (&#39;OR3QHI&#39;, 0.9247394800186157, 0.38416817784309387, 0.021179458126425743), (&#39;OLG8KI&#39;, 0.50203937292099, 0.41641291975975037, 0.33802658319473267), (&#39;OS8FB2&#39;, 0.4290338158607483, 0.37786585092544556, 0.37065908312797546), (&#39;PO0STE&#39;, 0.44000244140625, 0.1597764492034912, 0.6215535998344421), (&#39;PQLRGZ&#39;, 0.5095629096031189, 0.28797411918640137, 0.3190390169620514), (&#39;PEA0HS&#39;, 0.5799059867858887, 0.33411896228790283, 0.7093403339385986), (&#39;PHF5WX&#39;, 0.4594501554965973, 0.06031719222664833, 0.7711545825004578), (&#39;P3NJLX&#39;, 0.6271070837974548, 0.21730348467826843, 0.08143997192382812), (&#39;PKRMNK&#39;, 0.6149240136146545, 0.1428648829460144, 0.3551514744758606), (&#39;PU3KS5&#39;, 0.6542876958847046, 0.22043351829051971, 0.360980749130249), (&#39;PDMILG&#39;, 0.15368808805942535, 0.018623029813170433, 0.6960301399230957), (&#39;PSO8V7&#39;, 0.5727221965789795, 0.2544085681438446, 0.44391489028930664), (&#39;PDTDLS&#39;, 0.5719941854476929, 0.2772318720817566, 0.12763100862503052), (&#39;P2SLLF&#39;, 0.5253719687461853, 0.045503705739974976, 0.9096059203147888), (&#39;OWX65S&#39;, 0.3475867807865143, 0.7581257820129395, 0.3240596354007721), (&#39;POV53J&#39;, 0.534246563911438, 0.3010644018650055, 0.43109452724456787), (&#39;QFA7WV&#39;, 0.6369423866271973, 0.13823093473911285, 0.34727177023887634), (&#39;QCMWSP&#39;, 0.7664173245429993, 0.5305317044258118, 0.13722693920135498), (&#39;PXQ79D&#39;, 0.5009458065032959, 0.1365419626235962, 0.39508017897605896), (&#39;QESDCL&#39;, 0.47529715299606323, 0.43980762362480164, 0.4463345408439636), (&#39;QAF4XR&#39;, 0.3065705895423889, 0.17730432748794556, 0.7290369272232056), (&#39;QBQ3MU&#39;, 0.4963902533054352, 0.08852103352546692, 0.687961757183075), (&#39;QMYOJ6&#39;, 0.5734791159629822, 0.11466676741838455, 0.6068760752677917), (&#39;Q1OIWW&#39;, 0.5994764566421509, 0.3953040540218353, 0.26230916380882263), (&#39;QJE37W&#39;, 0.5088845491409302, 0.6331449151039124, 0.050180986523628235), (&#39;QA7IYK&#39;, 0.27455538511276245, 0.4120631217956543, 0.5833863615989685), (&#39;PW2MCN&#39;, 0.20725856721401215, 0.7196050882339478, 0.40469473600387573), (&#39;QBMCSF&#39;, 0.41160398721694946, 0.6756073832511902, 0.2191135436296463), (&#39;R7FP03&#39;, 0.31965044140815735, 0.25944897532463074, 0.4518873989582062), (&#39;RF4O17&#39;, 0.6204872727394104, 0.12756133079528809, 0.5784841775894165), (&#39;RKXD3P&#39;, 0.5532651543617249, 0.28515350818634033, 0.23317742347717285), (&#39;RMPAL8&#39;, 0.36080873012542725, 0.11381081491708755, 0.5478522777557373), (&#39;R0HI1E&#39;, 0.5205101370811462, 0.6541985869407654, 0.11859840899705887), (&#39;RFU9SJ&#39;, 0.3827669620513916, 0.6727083325386047, 0.11637445539236069), (&#39;QSLW1A&#39;, 0.7073164582252502, 0.07184824347496033, 0.6373745799064636), (&#39;RIHVGZ&#39;, 0.49989375472068787, 0.15914276242256165, 0.6119880080223083), (&#39;QP94SG&#39;, 0.6471683979034424, 0.05605912581086159, 0.6357535719871521), (&#39;RMFE9V&#39;, 0.5732706785202026, 0.26090142130851746, 0.39286187291145325), (&#39;RHJXWS&#39;, 0.789381742477417, 0.9743158221244812, 0.00336287054233253), (&#39;RDNOTD&#39;, 0.2955825626850128, 0.8719452619552612, 0.18472854793071747), (&#39;RMI50F&#39;, 0.36141088604927063, 0.13605427742004395, 0.8744701147079468), (&#39;QYHNPR&#39;, 0.3848424553871155, 0.4460500478744507, 0.5083264112472534), (&#39;QRPICT&#39;, 0.6242584586143494, 0.6291865110397339, 0.146304190158844), (&#39;QZCK7S&#39;, 0.49458250403404236, 0.17611831426620483, 0.5261767506599426), (&#39;QZL820&#39;, 0.37850120663642883, 0.7140344381332397, 0.07197532057762146), (&#39;QOAIJ3&#39;, 0.6056985259056091, 0.4692515432834625, 0.13389937579631805), (&#39;S7GZWC&#39;, 0.7218178510665894, 0.6553412675857544, 0.09789466857910156), (&#39;RYKGHW&#39;, 0.5712995529174805, 0.09317877143621445, 0.6417238116264343), (&#39;SR566J&#39;, 0.658840537071228, 0.17970551550388336, 0.24063004553318024), (&#39;SU8SJG&#39;, 0.6166520118713379, 0.1382974088191986, 0.7197237610816956), (&#39;RQH3KT&#39;, 0.7424105405807495, 0.15567733347415924, 0.6054173111915588), (&#39;S2O52E&#39;, 0.3983828127384186, 0.6866629123687744, 0.14414912462234497), (&#39;S913KH&#39;, 0.5210802555084229, 0.31539830565452576, 0.3833640515804291), (&#39;S7MCDT&#39;, 0.4258679151535034, 0.011934246867895126, 0.9478728175163269), (&#39;RX81A2&#39;, 0.8916236162185669, 0.014527665451169014, 0.8964836597442627), (&#39;RZAMH5&#39;, 0.28043487668037415, 0.13926103711128235, 0.49447208642959595), (&#39;ROPN18&#39;, 0.5565586686134338, 0.08797381818294525, 0.5624768137931824), (&#39;S7J8A3&#39;, 0.49700963497161865, 0.23436595499515533, 0.2850606441497803), (&#39;SMIV0G&#39;, 0.48173514008522034, 0.35928165912628174, 0.22757501900196075), (&#39;SSF0H9&#39;, 0.3308647572994232, 0.4313095808029175, 0.346627801656723), (&#39;RT7JR4&#39;, 0.20841145515441895, 0.5099466443061829, 0.5818732380867004), (&#39;SS11ZQ&#39;, 0.6350971460342407, 0.2014315128326416, 0.5191973447799683), (&#39;RPP27S&#39;, 0.5488099455833435, 0.5103319883346558, 0.2278701663017273), (&#39;TDZOK8&#39;, 0.8127481937408447, 0.03443986922502518, 0.6324220299720764), (&#39;T68ZLY&#39;, 0.7429439425468445, 0.15641865134239197, 0.4429527819156647), (&#39;TC0TZS&#39;, 0.41160398721694946, 0.6756073832511902, 0.2191135436296463), (&#39;TOB5OB&#39;, 0.35693058371543884, 0.3311232626438141, 0.4983012080192566), (&#39;TGJ20B&#39;, 0.39570197463035583, 0.3774769902229309, 0.5440165996551514), (&#39;TJ61N5&#39;, 0.44465792179107666, 0.06555549800395966, 0.8257375955581665), (&#39;TD4ETQ&#39;, 0.34189870953559875, 0.5363031029701233, 0.11405190825462341), (&#39;T9U9XS&#39;, 0.7001675367355347, 0.17129388451576233, 0.19548803567886353), (&#39;TFSHIJ&#39;, 0.606170654296875, 0.28711116313934326, 0.21088330447673798), (&#39;TUNZFR&#39;, 0.37474289536476135, 0.7388493418693542, 0.11734072864055634), (&#39;TO708O&#39;, 0.7230402231216431, 0.16846373677253723, 0.2426656037569046), (&#39;T718DE&#39;, 0.5650072693824768, 0.07253021746873856, 0.5959060192108154), (&#39;T7LG0W&#39;, 0.35547804832458496, 0.3705935478210449, 0.6176123023033142), (&#39;TN3IZ7&#39;, 0.5615110397338867, 0.4609105885028839, 0.0941944420337677), (&#39;SYFAQK&#39;, 0.5734791159629822, 0.11466676741838455, 0.6068760752677917), (&#39;TMOGMF&#39;, 0.31492045521736145, 0.2246960997581482, 0.8110803961753845), (&#39;U4I5QJ&#39;, 0.7406383752822876, 0.30490100383758545, 0.1996309608221054), (&#39;U0PZLQ&#39;, 0.2426294982433319, 0.7031250596046448, 0.20060156285762787), (&#39;U15LHF&#39;, 0.7047895789146423, 0.22105956077575684, 0.2161257565021515), (&#39;UD23TV&#39;, 0.5867003798484802, 0.6932092308998108, 0.250614196062088), (&#39;U8L2AD&#39;, 0.587512195110321, 0.16394172608852386, 0.5348154306411743), (&#39;TVV0DY&#39;, 0.43469613790512085, 0.27177634835243225, 0.39320245385169983), (&#39;TX1I8W&#39;, 0.5670046210289001, 0.2568303346633911, 0.561954140663147), (&#39;UFKL09&#39;, 0.5384533405303955, 0.4904067814350128, 0.24821169674396515), (&#39;U2GLZO&#39;, 0.3918873071670532, 0.7132222652435303, 0.18749816715717316), (&#39;U2QBSA&#39;, 0.7740824818611145, 0.6082998514175415, 0.1477620154619217), (&#39;TVPKJX&#39;, 0.5663838386535645, 0.09641315788030624, 0.5869689583778381), (&#39;U4IYWZ&#39;, 0.5639747381210327, 0.05780581757426262, 0.943897008895874), (&#39;U3XZKZ&#39;, 0.812824547290802, 0.8471141457557678, 0.0447569340467453), (&#39;U8JG8D&#39;, 0.5348402857780457, 0.1582528054714203, 0.4945765733718872), (&#39;UF4NXJ&#39;, 0.267336905002594, 0.6473743319511414, 0.4301424026489258), (&#39;UC43IC&#39;, 0.4180237054824829, 0.23694129288196564, 0.5502701997756958), (&#39;TZISQ4&#39;, 0.3575843274593353, 0.051023565232753754, 0.8395153880119324), (&#39;U8I1LA&#39;, 0.562407910823822, 0.1458968222141266, 0.5534235239028931), (&#39;V967QV&#39;, 0.7114021182060242, 0.25811368227005005, 0.4691060185432434), (&#39;V4HYOA&#39;, 0.6220875382423401, 0.505662739276886, 0.1999049037694931), (&#39;V9HEG6&#39;, 0.17163488268852234, 0.6838212013244629, 0.7874372601509094), (&#39;ULCPMW&#39;, 0.5727869868278503, 0.4319581389427185, 0.31059741973876953), (&#39;UIPPYH&#39;, 0.5797725319862366, 0.09175223112106323, 0.6720312237739563), (&#39;VHVC6L&#39;, 0.8249558210372925, 0.31956881284713745, 0.0850929245352745), (&#39;VFYL64&#39;, 0.713832437992096, 0.3843974769115448, 0.11705310642719269), (&#39;VNJD86&#39;, 0.6037064790725708, 0.6001046895980835, 0.11563725769519806), (&#39;V430Z9&#39;, 0.7281013131141663, 0.041462548077106476, 0.7806501388549805), (&#39;VBR6L3&#39;, 0.8489643335342407, 0.7645213007926941, 0.03329293429851532), (&#39;V66D9F&#39;, 0.6196373105049133, 0.2331673800945282, 0.1988428682088852), (&#39;VF88W8&#39;, 0.6166520118713379, 0.1382974088191986, 0.7197237610816956), (&#39;VBRW9V&#39;, 0.5088845491409302, 0.6331449151039124, 0.050180986523628235), (&#39;UJHQ2J&#39;, 0.6551753282546997, 0.7724262475967407, 0.018660645931959152), (&#39;UGQ06J&#39;, 0.37336939573287964, 0.26661863923072815, 0.561599612236023), (&#39;URXE6M&#39;, 0.0558549165725708, 0.7589428424835205, 0.5807883739471436), (&#39;V50UPU&#39;, 0.6216655373573303, 0.4171157479286194, 0.24392470717430115), (&#39;VV4E5H&#39;, 0.46101728081703186, 0.23929983377456665, 0.519588828086853), (&#39;WM6KLP&#39;, 0.8016591668128967, 0.1380905956029892, 0.1566392034292221), (&#39;WCY8TY&#39;, 0.5797725319862366, 0.09175223112106323, 0.6720312237739563), (&#39;VWNRJV&#39;, 0.664336621761322, 0.07066856324672699, 0.7327926158905029), (&#39;VT4FV1&#39;, 0.5351340174674988, 0.3972906768321991, 0.28528186678886414), (&#39;WXX7FT&#39;, 0.6673519611358643, 0.5093246102333069, 0.13259893655776978), (&#39;WSOC79&#39;, 0.5559815764427185, 0.347400963306427, 0.2714214324951172), (&#39;WP4QZT&#39;, 0.5851986408233643, 0.10696535557508469, 0.6877211332321167), (&#39;WCJ52P&#39;, 0.4038623869419098, 0.2978900969028473, 0.3957677483558655), (&#39;WVLN4Q&#39;, 0.551720142364502, 0.0831625759601593, 0.48085257411003113), (&#39;VXATQV&#39;, 0.6569410562515259, 0.21957522630691528, 0.5211187601089478), (&#39;VZ7SD1&#39;, 0.6860790252685547, 0.08306168764829636, 0.30364152789115906), (&#39;VTMJM6&#39;, 0.5178174376487732, 0.3780776858329773, 0.17734842002391815), (&#39;W7B3S5&#39;, 0.4329937696456909, 0.25945621728897095, 0.6263152360916138), (&#39;VW34Z3&#39;, 0.37764251232147217, 0.15554946660995483, 0.608310341835022), (&#39;WEVNCF&#39;, 0.9104094505310059, 0.17111662030220032, 0.25984859466552734), (&#39;XEM0EN&#39;, 0.4083739221096039, 0.3511752784252167, 0.48615774512290955), (&#39;X7336C&#39;, 0.34750667214393616, 0.3445463478565216, 0.47770339250564575), (&#39;XFLV58&#39;, 0.6011307835578918, 0.07442113012075424, 0.7696645855903625), (&#39;XGYBWF&#39;, 0.7404030561447144, 0.035145897418260574, 0.7455354928970337), (&#39;WZ0G5N&#39;, 0.378435879945755, 0.04773752763867378, 0.9719988703727722), (&#39;WZ40LJ&#39;, 0.48891574144363403, 0.6139665842056274, 0.20942460000514984), (&#39;X1UJGJ&#39;, 0.5269880890846252, 0.2853861451148987, 0.5463894009590149), (&#39;X292N8&#39;, 0.23358361423015594, 0.6869677901268005, 0.12397120893001556), (&#39;XGCF0C&#39;, 0.6612803339958191, 0.5102728009223938, 0.1606421172618866), (&#39;X49T3Q&#39;, 0.738208532333374, 0.729756772518158, 0.1278485357761383), (&#39;X2P0VH&#39;, 0.6112979650497437, 0.3613045811653137, 0.6834973692893982), (&#39;WYNVC7&#39;, 0.6253055930137634, 0.5918134450912476, 0.2708269953727722), (&#39;XRSROJ&#39;, 0.43925440311431885, 0.07597201317548752, 0.6819133758544922), (&#39;XRFFAM&#39;, 0.7655543684959412, 0.3540771007537842, 0.1879432648420334), (&#39;Y1BK8U&#39;, 0.6149240136146545, 0.1428648829460144, 0.3551514744758606), (&#39;XVZ454&#39;, 0.3279436230659485, 0.3752973675727844, 0.6958822011947632), (&#39;YBYJWV&#39;, 0.558250367641449, 0.9395276308059692, 0.059939220547676086), (&#39;XWNGYU&#39;, 0.6318258047103882, 0.8703107833862305, 0.014608214609324932), (&#39;XW716R&#39;, 0.5580952763557434, 0.3926568627357483, 0.2996879518032074), (&#39;Y7VVJU&#39;, 0.5625999569892883, 0.1511717140674591, 0.4282362163066864), (&#39;YJDMJX&#39;, 0.6262410879135132, 0.5158154964447021, 0.3019753694534302), (&#39;XPD4SW&#39;, 0.4681275188922882, 0.09344448894262314, 0.8185367584228516), (&#39;XXXIOT&#39;, 0.3644687831401825, 0.1543169915676117, 0.41097283363342285), (&#39;XKXIOC&#39;, 0.4961595833301544, 0.2169906347990036, 0.34412503242492676), (&#39;XNXYRH&#39;, 0.28489628434181213, 0.5859622359275818, 0.02024322934448719), (&#39;YC778I&#39;, 0.7714511156082153, 0.2679155170917511, 0.2600250542163849), (&#39;YWVGLF&#39;, 0.6509299874305725, 0.20559225976467133, 0.2882787883281708), (&#39;YN33U7&#39;, 0.6202673316001892, 0.1365044265985489, 0.5474879145622253), (&#39;YYYK9H&#39;, 0.5823001861572266, 0.21020746231079102, 0.12962542474269867), (&#39;YQJL65&#39;, 0.7703189253807068, 0.06791326403617859, 0.6385974884033203), (&#39;YYBG2V&#39;, 0.46082568168640137, 0.2950115203857422, 0.5164710879325867), (&#39;YK16PZ&#39;, 0.3864304721355438, 0.17685146629810333, 0.46303772926330566), (&#39;YV619U&#39;, 0.5030880570411682, 0.045054249465465546, 0.824093759059906), (&#39;Z63BLU&#39;, 0.5657692551612854, 0.738356351852417, 0.08681140094995499), (&#39;Z8067W&#39;, 0.36699435114860535, 0.40871837735176086, 0.7188639640808105), (&#39;YUX9Y2&#39;, 0.34038403630256653, 0.4004913568496704, 0.38883182406425476), (&#39;Z7V1P8&#39;, 0.4558756649494171, 0.12982943654060364, 0.5830333232879639), (&#39;YQ8BG3&#39;, 0.5125330686569214, 0.5350145697593689, 0.09806524217128754), (&#39;Z7JMTK&#39;, 0.22404788434505463, 0.31334632635116577, 0.7381528615951538), (&#39;YQL491&#39;, 0.6076361536979675, 0.18302568793296814, 0.6723843812942505), (&#39;ZKF0L9&#39;, 0.5081243515014648, 0.27872055768966675, 0.40724340081214905), (&#39;ZOXDKA&#39;, 0.1860327571630478, 0.08223947137594223, 0.9435626864433289), (&#39;ZFYYJ7&#39;, 0.4315113425254822, 0.16129712760448456, 0.5794776678085327), (&#39;ZDPAP7&#39;, 0.42297202348709106, 0.46588656306266785, 0.5185770988464355), (&#39;ZSZMOS&#39;, 0.6885243654251099, 0.33229878544807434, 0.2596447765827179), (&#39;ZCZR1I&#39;, 0.6995667219161987, 0.12966565787792206, 0.36010193824768066), (&#39;ZTWSDG&#39;, 0.48264241218566895, 0.1751178801059723, 0.5658376216888428), (&#39;ZC1FWW&#39;, 0.8759916424751282, 0.2773497402667999, 0.10218110680580139), (&#39;ZMAB3R&#39;, 0.3205082416534424, 0.8140040636062622, 0.1932642012834549)] . dataFrame = pd.DataFrame(preds, columns=[&quot;ID&quot;,&quot;leaf_rust&quot;,&quot;stem_rust&quot;,&quot;healthy_wheat&quot;]) dataFrame.to_csv(&#39;/content/gdrive/MyDrive/ColabNotebooks/CropDisease/results.csv&#39;, index=False) .",
            "url": "https://simonhanseen.github.io/fastpages/2021/03/23/Zindi-Africa-Crop-Disease-without-optimization.html",
            "relUrl": "/2021/03/23/Zindi-Africa-Crop-Disease-without-optimization.html",
            "date": " • Mar 23, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Opgaver Uge8",
            "content": "1. Explain how the “pixel similarity” approach to classifying digits works. . Finder gennemsnitlig værdi for hver individuelle pixel i billedet og laver et ideelt billede. Derefte sammenligner den med de ideelle billeder for at karakterisere tallet. | . 2. What is a list comprehension? Create one now that selects odd numbers from a list and doubles them. . Måde at lave en liste (LINQ) | . numbers = [1,2,3,4,5,6,7,8,9] odd = [x*2 for x in numbers if x%2==0] | . 3. What is a “rank-3 tensor”? . Tre dimensionel tensor | . . 4. What are RMSE and L1 norm? . L1 norm:  . | Take the mean of the absolute value of differences (absolute value is the function that replaces negative values with positive values). This is called the mean absolute difference or L1 norm . | . (L2 norm) RMSE:  . | Take the mean of the square of differences (which makes everything positive) and then take the square root (which undoes the squaring). This is called the root mean squared error (RMSE) or L2 norm. . | . 5. Create a 3×3 tensor or array containing the numbers from 1 to 9. Double it. Select the bottom-right four numbers. . data =  [[1,2,3],[4,5,6],[7,8,9]] . tens = tensor(data) * 2 . tens[-2:, -2:] . | . eller: . . 6. What is broadcasting? . Broadcasting means it will automatically expand the tensor with the smaller rank to have the same size as the one with the larger rank. | . 7. Are metrics generally calculated using the training set, or the validation set? Why? . Metrics are always calculated on the validation set. . | Fordi Metrics fortæller os om kvaliteten af vores model . | . 8. What is SGD? . Stochastic gradient descent (often abbreviated SGD) is an iterative method for optimizing an objective function with suitable smoothness properties (e.g. differentiable or subdifferentiable). | . 9. What are the seven steps in SGD for machine learning? . Initialize the weights. . | For each image, use these weights to predict whether it appears to be a 3 or a 7. . | Based on these predictions, calculate how good the model is (its loss). . | Calculate the gradient, which measures for each weight, how changing that weight would change the loss . | Step (that is, change) all the weights based on that calculation. . | Go back to the step 2, and repeat the process. . | Iterate until you decide to stop the training process (for instance, because the model is good enough or you don’t want to wait any longer). . | . 10. How do we initialize the weights in a model? . Random values | . 11. What is “loss”? . A measure of how good the model is, chosen to drive training via SGD(Stochastic Gradient Descent) | . 12. Why can’t we always use a high learning rate? . Risikere at “hoppe” (step over) vores optimal/local minimum . | Kan risikere at få en forværret loss . | Risiko for at den “bouncer” som kan resultere i at der skal betydeligt flere trainings til at få trænet med succes . | . 13. What is a “gradient”? . En gradient måler ændringen i alle vægtene i forhold til ændringen i error. . | Gradient is simply a vector which gives the direction of maximum rate of change. By taking steps in that direction, we hope to reach our optimal solution. . | . 14. Why can’t we use accuracy as a loss function? . Gradient can be written in this in mathematically as: (y_new - y_old) / (x_new - x_old). This gives us a good approximation of the gradient when x_new is very similar to x_old, meaning that their difference is very small. But accuracy only changes at all when a prediction changes from a 3 to a 7, or vice versa. The problem is that a small change in weights from x_old to x_new isn’t likely to cause any prediction to change, so (y_new - y_old) will almost always be 0. In other words, the gradient is 0 almost everywhere. . 15. What is the difference between a loss function and a metric? . Loss: A measure of how good the model is, chosen to drive training via SGD(Stochastic Gradient Descent) . Metric: A measurement of how good the model is, using the validation set, chosen for human consumption . A loss function is used to train your model. A metric is used to evaluate your model. . | A loss function is used during the learning process. A metric is used after the learning process . | . 16. What is the function to calculate new weights using a learning rate? . 17. What does the backward method do? .",
            "url": "https://simonhanseen.github.io/fastpages/2021/02/23/Opgaver-Uge8.html",
            "relUrl": "/2021/02/23/Opgaver-Uge8.html",
            "date": " • Feb 23, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Opgaver Uge6",
            "content": "Opgave 2 . Besvar følgende spørgsmål, f.eks. vha. ”Ordet rundt”. Noter svarene ned idet I skal bruge dem til ”Tre til te” senere. . Name five areas where deep learning is now the best in the world. | Natural language processing (NLP):: Answering questions; speech recognition; summarizing documents; classifying documents; finding names, dates, etc. in documents; searching for articles mentioning a concept . Computer vision:: Satellite and drone imagery interpretation (e.g., for disaster resilience); face recognition; image captioning; reading traffic signs; locating pedestrians and vehicles in autonomous vehicles . Medicine:: Finding anomalies in radiology images, including CT, MRI, and X-ray images; counting features in pathology slides; measuring features in ultrasounds; diagnosing diabetic retinopathy . Biology:: Folding proteins; classifying proteins; many genomics tasks, such as tumor-normal sequencing and classifying clinically actionable genetic mutations; cell classification; analyzing protein/protein interactions . Image generation:: Colorizing images; increasing image resolution; removing noise from images; converting images to art in the style of famous artists . Recommendation systems:: Web search; product recommendations; home page layout . Playing games:: Chess, Go, most Atari video games, and many real-time strategy games . Robotics:: Handling objects that are challenging to locate (e.g., transparent, shiny, lacking texture) or hard to pick up . Other applications:: Financial and logistical forecasting, text to speech, and much more… . Based on the book of the same name, what are the requirements for parallel distributed processing (PDP)? | A set of processing units A state of activation An output function for each unit A pattern of connectivity among units A propagation rule for propagating patterns of activities through the network of connectivities An activation rule for combining the inputs impinging on a unit with the current state of that unit to produce an output for the unit A learning rule whereby patterns of connectivity are modified by experience An environment within which the system must operate . What were the two theoretical misunderstandings that held back the field of neural networks? | En af de teoretiske misforståelser lyder på brugen af et ekstra lag af neuroner. Det ekstra lag neuroner skulle kunne klare f.eks. matematiske problemstillinger, men i praksis var det for stort og langsomt til at være brugbart. . Senere fandt man så ud af at ii praksisk så for at få en god performance, så skulle man bruge endnu flere lag af neuroner. . What is a GPU? | Grafikkort. . Why is it hard to use a traditional computer program to recognize images in a photo? | Fordi det at skulle lære et program de færdigheder og input som mennesket bruger når de genkender f.eks. et billede, ikke er ligetil, når man ikke kan sætte ord på det. . En computer gør nemlig kun det som den bliver bedt om, og når man ikke kan bede dem om at genkende som et menneske gør, så blev det svært. . What did Samuel mean by “weight assignment”? | Det er de valg som man tager ift. Værdierne af weights (variabler). Programmets input er værdier som den kører igennem for at kunne producere et resultat. Et eksempel er at tage image pixels som input og kunne returnere classification ”dog”. Programmets ”weight assignment” er de andre værdier som definerer hvordan programmet kører. . What term do we normally use in deep learning for what Samuel called “weights”? | Model Parameters . Draw a picture that summarizes Samuel’s view of a machine learning model. | . Why is it hard to understand why a deep learning model makes a particular prediction? | Meget af eksekveringen fungerer som black-box, hvor man ikke kender til medmindre man virkelig går i dybden, hvordan det hele fungerer. (Ikke nødvendigvis korrekt) . Større neurale netværker kan også være nærmest umuligt at analysere. . Det er svært at analysere og forstå ny data som der ikke er blevet trænet med på forhånd. . What is the name of the theorem that shows that a neural network can solve any mathematical problem to any level of accuracy? | The universal approximation theorem . What do you need in order to train a model? | Generelt set er det data. Men nogle af termerne for det er at modellen skal have adgang til et ”Validation . Set” som består af noget data den kan sammenligne med. . ”Traning Set” er det set som benyttes til at forbedre eller træne modellen til at forbedre predictionen. . Både Validation Set og Traning Set skal bestå af labels så modellen ved, hvad der er hvad. . How could a feedback loop impact the rollout of a predictive policing model? | Når man bliver ved med at få positiv feedback, så kan det påvirke resultat ved f.eks. den kun kigger på hvor mange der bliver arresteret i et område. Hvis det område giver gode resultater, vil AI’en sender flere betjente hen til område, uden at tage højde for de negative ting – hvilket kan give problemer med at politiet ikke er nok til stede i andre områder eller lignende. . Do we always have to use 224×224-pixel images with the cat recognition model? | Billede størrelse hjælper med at gøre det nemmere at finde kendetegn vha. flere pixels, men jo større billede jo værre performance. . Billede størrelsen er ikke bestemt, men 224x224 er blevet benyttet af historiske årsager. . What is the difference between classification and regression? | En classification model er en model som forsøger at forudsige en klasse eller en kategory. Den forudsige et nummer af konkrete muligheder som hund eller kat. . En regression er en model som forsøger at forudsige en eller flere numeriske kvantiteter såsom temperatur eller lokation. . Opgave 3 . What is a validation set? What is a test set? Why do we need them? | ”Validation Set” bruges til at validere forudsigelsen. . ”Testing Set” bruges til at træne modellen. . Benyttes for ikke at overfit modellen. . What will fastai do if you don’t provide a validation set? | Sætte en default value til 20% af dit dataset som validation set. . Can we always use a random sample for a validation set? Why or why not? | Nej, fordi hvis man bare randomizer noget, så bliver det f.eks. hvis der kun er en eller to billeder af en person, så er det sådan personen bliver genkendt – og derfor ikke blive genkendt i andre scenarier. . What is overfitting? Provide an example. | Det er når modellen begynder at huske ”training set” i stedet for at finde generelle underlæggende patterns i data’en. Modellen begynder at genkende nogle af de tilfældigheder som data’et har, hvilket medfører at den ikke kan forudsige korrekt på fremtidige predictions da den forventer den samme tilfældighed – hvilket påvirket predictionen negativt. . Et eksempel er at hvis modellen pludseligt anser en kat som siddende med siden til, så kan det påvirke sådan at den kan sige en hund er en kat fordi den sidder med siden til – eller at den ikke kan genkende en kat fordi den ikke har siden til . What is a metric? How does it differ from “loss”? | En “metric” bruges til at vurdere kvaliteten af ens (prediction) outputs, således at man fx kan svare på hvor stor en procentdel af ens predictions som bliver klassificeret forkert. i eksemplet fra bogen bruges “error_rate” . Metric: læseligt ift. hvordan modellen performer Loss: Noget SGD(Stochastic Gradient Descent) kan bruge. . How can pretrained models help? | Det hjælper med at give en allerede træne model som man kan ”fine-tune” til sit eget behov. Så har man et bedre udgangspunkt til at starte med. . Lavere træningstid . | Færre data . | Bedre resultater . | . What is the “head” of a model? | Det er når du bruger en pretrained model, hvor du fjerner det sidste lag. Det lag skifter du ud med et eller flere lag med forskellige weights. Det kalder man et ”head”. Dette skyldes at den data du fjerner, er den data som er customized til den originale task – som du så fjerner og replacer. Den data du replacer med er tilføjet for at være specific til det nye datasæt. . What kinds of features do the early layers of a CNN find? How about the later layers? | Tidlige lag lærer features som diagonaler, horisontale og vertikale kanter. Senere lag lærer med advanceret features som f.eks. bildæk, blomsterblade og omridset af et dyr. . Are image models only useful for photos? | Nej, man kan også bruge dette til at analysere andre ting som f.eks. lyd (spektrogrammer). . What is an “architecture”? | Den funktionelle form af en model er ”architecture”. . What is segmentation? | Det er en model der kan genkende indholdet af hver enkelt pixel i et billede. . What is y_range used for? When do we need it? | Det er et parameter der begrænser predictionen. . Benyttes i Regressions model, hvor den skal have en range den skal finde imellem. . What are “hyperparameters”? | Hyperparameter er de variabler som bestemmer netværkets struktur og hvordan det er trænet. . What’s the best way to avoid failures when using AI in an organization? | Sikre at Training Set og Validation Set er defineret. . Complete the Jupyter Notebook online appendix. (use the file app_jupyter.ipynb in Gradient or get it from github: https://oreil.ly/9uPZe) . | Why is a GPU useful for deep learning? How is a CPU different, and why is it less effective for deep learning? . | GPU er optimeret til at træne AI og Deep Learning models, da de kan ”process multiple computations simultaneously”. Hurtigere til at køre flere threads af matematiske beregninger om og om igen. . Try to think of three areas where feedback loops might impact the use of machine learning. See if you can find documented examples of that happening in practice. | Video Recommendation Systems – Will often recommend the same Predictive Police Model – Betjente vil ende det samme sted, hvor tallene er højest. . Advertising .",
            "url": "https://simonhanseen.github.io/fastpages/2021/02/16/Opgaver-Uge6.html",
            "relUrl": "/2021/02/16/Opgaver-Uge6.html",
            "date": " • Feb 16, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Hotdog classifier",
            "content": "import requests import PIL from fastbook import * from fastai.vision.widgets import * key = &quot;1be3ada0f2a649d087e9fb39798485a0&quot; customConfigId = &quot;efb1b149-c219-4091-be6d-14a279c405c4&quot; def search_images_bing_new(key, term, customConfigId, min_sz=128): url = &#39;https://api.bing.microsoft.com/v7.0/custom/images/search?&#39; + &#39;q=&#39; + term + &#39;&amp;&#39; + &#39;customconfig=&#39; + customConfigId + &#39;&amp;&#39; + &#39;count=150&#39; r = requests.get(url, headers={&#39;Ocp-Apim-Subscription-Key&#39;: key}) search_results = r.json() return L([img[&quot;thumbnailUrl&quot;] for img in search_results[&quot;value&quot;][:150]]) results = search_images_bing_new(key, &#39;hotdog&#39;, customConfigId) ims = results.attrgot(&#39;content_url&#39;) len(ims) . 150 . food_types = &#39;hotdog&#39;, &#39;food&#39; path = Path(&#39;foods3&#39;) if not path.exists(): path.mkdir() for o in food_types: dest = (path/o) dest.mkdir(exist_ok=True) results = search_images_bing_new(key, f&#39;{o}&#39;, customConfigId) download_images(dest, urls=results) . fns = get_image_files(path) fns . (#300) [Path(&#39;foods3/food/00000000.jpg&#39;),Path(&#39;foods3/food/00000001.jpg&#39;),Path(&#39;foods3/food/00000002.jpg&#39;),Path(&#39;foods3/food/00000003.jpg&#39;),Path(&#39;foods3/food/00000004.jpg&#39;),Path(&#39;foods3/food/00000005.jpg&#39;),Path(&#39;foods3/food/00000006.jpg&#39;),Path(&#39;foods3/food/00000007.jpg&#39;),Path(&#39;foods3/food/00000008.jpg&#39;),Path(&#39;foods3/food/00000009.jpg&#39;)...] . failed = verify_images(fns) failed . (#0) [] . failed.map(Path.unlink); . foods = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) . dls = foods.dataloaders(path) . dls.valid.show_batch(max_n=4, nrows=1) . foods = foods.new(item_tfms=Resize(128, ResizeMethod.Squish)) dls = foods.dataloaders(path) dls.valid.show_batch(max_n=4, nrows=1) . foods = foods.new(item_tfms=Resize(128, ResizeMethod.Pad, pad_mode=&#39;zeros&#39;)) dls = foods.dataloaders(path) dls.valid.show_batch(max_n=4, nrows=1) . foods = foods.new(item_tfms=RandomResizedCrop(128, min_scale=0.3)) dls = foods.dataloaders(path) dls.train.show_batch(max_n=4, nrows=1, unique=True) . foods = foods.new(item_tfms=Resize(128), batch_tfms=aug_transforms(mult=2)) dls = foods.dataloaders(path) dls.train.show_batch(max_n=8, nrows=2, unique=True) . foods = foods.new( item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms()) dls = foods.dataloaders(path) . learn = cnn_learner(dls, resnet34, metrics=error_rate) learn.fine_tune(2) . epoch train_loss valid_loss error_rate time . 0 | 1.097385 | 0.474160 | 0.166667 | 00:03 | . epoch train_loss valid_loss error_rate time . 0 | 0.522270 | 0.158216 | 0.066667 | 00:03 | . 1 | 0.416844 | 0.124328 | 0.050000 | 00:03 | . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . interp.plot_top_losses(5, nrows=1) . !pip install voila !jupyter serverextension enable --sys-prefix voila . Requirement already satisfied: voila in /opt/conda/envs/fastai/lib/python3.8/site-packages (0.2.6) Requirement already satisfied: jupyter-server&lt;2.0.0,&gt;=0.3.0 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from voila) (1.3.0) Requirement already satisfied: nbconvert&lt;7,&gt;=6.0.0 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from voila) (6.0.7) Requirement already satisfied: jupyter-client&lt;7,&gt;=6.1.3 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from voila) (6.1.7) Requirement already satisfied: nbclient&lt;0.6,&gt;=0.4.0 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from voila) (0.5.1) Requirement already satisfied: prometheus-client in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (0.9.0) Requirement already satisfied: nbformat in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (5.0.8) Requirement already satisfied: pyzmq&gt;=17 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (20.0.0) Requirement already satisfied: jinja2 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (2.11.2) Requirement already satisfied: Send2Trash in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (1.5.0) Requirement already satisfied: terminado&gt;=0.8.3 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (0.9.1) Requirement already satisfied: anyio&gt;=2.0.2 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (2.1.0) Requirement already satisfied: ipython-genutils in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (0.2.0) Requirement already satisfied: traitlets&gt;=4.2.1 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (5.0.5) Requirement already satisfied: tornado&gt;=6.1.0 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (6.1) Requirement already satisfied: jupyter-core&gt;=4.4.0 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (4.7.0) Requirement already satisfied: mistune&lt;2,&gt;=0.8.1 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (0.8.4) Requirement already satisfied: pandocfilters&gt;=1.4.1 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (1.4.2) Requirement already satisfied: defusedxml in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (0.6.0) Requirement already satisfied: pygments&gt;=2.4.1 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (2.7.2) Requirement already satisfied: jupyterlab-pygments in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (0.1.2) Requirement already satisfied: bleach in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (3.2.1) Requirement already satisfied: entrypoints&gt;=0.2.2 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (0.3) Requirement already satisfied: testpath in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (0.4.4) Requirement already satisfied: python-dateutil&gt;=2.1 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jupyter-client&lt;7,&gt;=6.1.3-&gt;voila) (2.8.1) Requirement already satisfied: async-generator in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbclient&lt;0.6,&gt;=0.4.0-&gt;voila) (1.10) Requirement already satisfied: nest-asyncio in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbclient&lt;0.6,&gt;=0.4.0-&gt;voila) (1.4.3) Requirement already satisfied: jsonschema!=2.5.0,&gt;=2.4 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from nbformat-&gt;jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (3.2.0) Requirement already satisfied: MarkupSafe&gt;=0.23 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jinja2-&gt;jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (1.1.1) Requirement already satisfied: ptyprocess; os_name != &#34;nt&#34; in /opt/conda/envs/fastai/lib/python3.8/site-packages (from terminado&gt;=0.8.3-&gt;jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (0.6.0) Requirement already satisfied: sniffio&gt;=1.1 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from anyio&gt;=2.0.2-&gt;jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (1.2.0) Requirement already satisfied: idna&gt;=2.8 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from anyio&gt;=2.0.2-&gt;jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (2.10) Requirement already satisfied: six&gt;=1.9.0 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from bleach-&gt;nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (1.15.0) Requirement already satisfied: webencodings in /opt/conda/envs/fastai/lib/python3.8/site-packages (from bleach-&gt;nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (0.5.1) Requirement already satisfied: packaging in /opt/conda/envs/fastai/lib/python3.8/site-packages (from bleach-&gt;nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (20.4) Requirement already satisfied: attrs&gt;=17.4.0 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jsonschema!=2.5.0,&gt;=2.4-&gt;nbformat-&gt;jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (20.3.0) Requirement already satisfied: setuptools in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jsonschema!=2.5.0,&gt;=2.4-&gt;nbformat-&gt;jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (49.6.0.post20201009) Requirement already satisfied: pyrsistent&gt;=0.14.0 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from jsonschema!=2.5.0,&gt;=2.4-&gt;nbformat-&gt;jupyter-server&lt;2.0.0,&gt;=0.3.0-&gt;voila) (0.17.3) Requirement already satisfied: pyparsing&gt;=2.0.2 in /opt/conda/envs/fastai/lib/python3.8/site-packages (from packaging-&gt;bleach-&gt;nbconvert&lt;7,&gt;=6.0.0-&gt;voila) (2.4.7) Enabling: voila - Writing config: /opt/conda/envs/fastai/etc/jupyter - Validating... voila 0.2.6 OK . learn.export() . #path.ls(file_exts=&#39;.pkl&#39;) . (#1) [Path(&#39;export.pkl&#39;)] . learn_inf = load_learner(path/&#39;export.pkl&#39;) . . (&#39;food&#39;, TensorImage(0), TensorImage([0.9775, 0.0225])) . btn_upload = widgets.FileUpload() btn_upload . img = PILImage.create(btn_upload.data[-1]) . out_pl = widgets.Output() out_pl.clear_output() with out_pl: display(img.to_thumb(128,129)) out_pl . pred,pred_idx,probs = learn_inf.predict(img) . lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; lbl_pred . btn_run = widgets.Button(description=&#39;Classify&#39;) btn_run . def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; btn_run.on_click(on_click_classify) . btn_upload = widgets.FileUpload() . VBox([widgets.Label(&#39;Select your food!&#39;), btn_upload, btn_run, out_pl, lbl_pred]) .",
            "url": "https://simonhanseen.github.io/fastpages/2021/02/16/Hotdog-classifier.html",
            "relUrl": "/2021/02/16/Hotdog-classifier.html",
            "date": " • Feb 16, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://simonhanseen.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://simonhanseen.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://simonhanseen.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://simonhanseen.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}